Link Time Optimization
======================

The DPDK framework supports compilation with link time optimization
turned on.  This depends obviously on the capabilities of the compiler
to do "whole program" optimization at link time and is available only
for compilers that support that feature (gcc, clang and icc).  To be
more specific compiler have to support creation of ELF objects
containing both normal code and internal representation
(fat-lto-objects).  This is required since during build some code is
generated by parsing produced ELF objects (pmdinfogen).

The amount of performance gain that one can get from LTO depends on the
compiler and the code that is being compiled.  However LTO is also
useful for additional code analysis done by the compiler.  In particular
due to interprocedural analysis compiler can produce additional warnings
about variables that might be used uninitialized.  Some of these
warnings might be "false positives" though and you might need to
explicitly initialize variable in order to silence the compiler.

Link time optimization can be enabled for whole DPDK framework by
setting:

.. code-block:: console
    CONFIG_ENABLE_LTO=y

in config file for the case of make based build and by:

.. code-block:: console
    meson build -Denable_lto=true
    ninja -C build

for the case of meson based build.

Please note that turning LTO on causes considerable extension of
compilation time.
