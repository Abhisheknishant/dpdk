/* SPDX-License-Identifier: BSD-3-Clause
 * Copyright(c) 2019-2020 Intel Corporation
 */

#ifndef TEST_CRYPTODEV_MIXED_TEST_VECTORS_H_
#define TEST_CRYPTODEV_MIXED_TEST_VECTORS_H_

struct mixed_cipher_auth_test_data {

	enum rte_crypto_auth_algorithm auth_algo;

	struct {
		uint8_t data[64];
		unsigned int len; /* length must be in Bytes */
	} auth_key;

	struct {
		uint8_t data[64];
		unsigned int len; /* length must be in Bytes */
	} auth_iv;

	struct {
		unsigned int len_bits;
		unsigned int offset_bits;
	} auth;

	enum rte_crypto_cipher_algorithm cipher_algo;

	struct {
		uint8_t data[64];
		unsigned int len; /* length must be in Bytes */
	} cipher_key;

	struct {
		uint8_t data[64] __rte_aligned(16);
		unsigned int len; /* length must be in Bytes */
	} cipher_iv;

	struct {
		unsigned int len_bits;
		unsigned int offset_bits;
	} cipher;

	struct {
		uint8_t data[1024];
		unsigned int len_bits;
	} plaintext;

	struct {
		uint8_t data[1024];
		unsigned int len_bits;
	} ciphertext;

	struct {
		uint8_t data[64];
		unsigned int len; /* length must be in Bytes */
		unsigned int offset; /* offset must be in Bytes */
	} digest_enc;

	struct {
		unsigned int len_bits;
	} validDataLen;

	struct {
		unsigned int len_bits;
	} validCipherLen;

	struct {
		unsigned int len_bits;
	} validAuthLen;
};

struct mixed_cipher_auth_test_data auth_aes_cmac_cipher_aes_ctr_test_case_1 = {
	.auth_algo = RTE_CRYPTO_AUTH_AES_CMAC,
	.auth_key = {
		.data = {
			0x6E, 0x87, 0xED, 0xC5, 0xEC, 0x71, 0xB3, 0xFF,
			0xC6, 0xB6, 0xCD, 0xC6, 0xD0, 0x6F, 0x0E, 0xD3
		},
		.len = 16,
	},
	.auth_iv = {
		.data = {
			0x1D, 0x92, 0xB8, 0x28, 0xAE, 0xF3, 0x79, 0x06,
			0xA9, 0x18, 0xA0, 0x47, 0xF5, 0x32, 0xC4, 0xF4
		},
		.len = 16,
	},
	.auth = {
		.len_bits = 124 << 3,
		.offset_bits = 0,
	},
	.cipher_algo = RTE_CRYPTO_CIPHER_AES_CTR,
	.cipher_key = {
		.data = {
			0x7C, 0xE1, 0x24, 0x38, 0x27, 0xB8, 0x5E, 0xE4,
			0x9C, 0x46, 0xB4, 0x14, 0xAD, 0x9D, 0xB5, 0x23
		},
		.len = 16,
	},
	.cipher_iv = {
		.data = {
			0x7E, 0xC5, 0x42, 0x76, 0x31, 0xC4, 0xE5, 0xF4,
			0xBF, 0xDE, 0xC5, 0x36, 0xFC, 0x7A, 0xA6, 0x5B
		},
		.len = 16,
	},
	.cipher = {
		.len_bits = 126 << 3,
		.offset_bits = 2 << 3,
	},
	.plaintext = {
		.data = {
			0xAA, 0x09, 0xD1, 0xDE, 0xE0, 0x30, 0x1E, 0xDC,
			0xDD, 0x91, 0x77, 0xF5, 0x04, 0x05, 0xFD, 0x0E,
			0xC1, 0x5F, 0x8C, 0x7A, 0x88, 0x71, 0xE4, 0x70,
			0x31, 0x73, 0xAE, 0x6F, 0x5D, 0x12, 0xE9, 0x08,
			0x1B, 0xBB, 0xE6, 0xFB, 0xEB, 0x04, 0xD8, 0xC8,
			0x96, 0x4F, 0xBE, 0x9B, 0x54, 0xBC, 0xA9, 0x15,
			0x1B, 0x36, 0x90, 0xA4, 0xA7, 0x74, 0x14, 0xD9,
			0xE8, 0xC3, 0x49, 0x46, 0xD5, 0x32, 0x4E, 0xF0,
			0xED, 0x34, 0xEC, 0xD9, 0x39, 0xC4, 0xA2, 0xCF,
			0x14, 0x61, 0x6A, 0x68, 0x1D, 0x14, 0x7D, 0x39,
			0x4A, 0x0E, 0xDD, 0xF2, 0x82, 0xF2, 0xCB, 0x6B,
			0xB6, 0x14, 0xB1, 0x8C, 0x47, 0xFF, 0x7D, 0x35,
			0x34, 0x69, 0x0F, 0x6E, 0x2E, 0xB1, 0x3E, 0x42,
			0x12, 0xA9, 0xAB, 0x2F, 0xBD, 0x28, 0x68, 0x08,
			0x36, 0x46, 0xFA, 0xB9, 0x38, 0xC6, 0x24, 0xEF,
			0xDB, 0xD6, 0x7B, 0x23
		},
		.len_bits = 124 << 3,
	},
	.ciphertext = {
		.data = {
			0xAA, 0x09, 0xB0, 0x48, 0xEB, 0xDA, 0xFC, 0x56,
			0x9D, 0x0D, 0x71, 0xE0, 0x88, 0x3A, 0xA3, 0xAB,
			0xA0, 0x22, 0x04, 0x1D, 0xF6, 0xB3, 0xAE, 0xE2,
			0xB4, 0x11, 0xBA, 0x2A, 0x55, 0xAF, 0xB1, 0x83,
			0xD6, 0x2F, 0xBE, 0x02, 0x41, 0x2E, 0xA3, 0xF2,
			0xF6, 0x1C, 0xD7, 0xA3, 0x0A, 0x8D, 0xEC, 0xDE,
			0x72, 0x20, 0x87, 0xE1, 0x28, 0xDA, 0x0D, 0x3E,
			0x1D, 0xAC, 0x7A, 0x61, 0xE1, 0x54, 0x85, 0x06,
			0xAC, 0xAD, 0x26, 0xA6, 0x76, 0x92, 0x4E, 0x00,
			0x5B, 0x60, 0xCD, 0xE0, 0x4F, 0xB3, 0xC0, 0x3B,
			0xBF, 0x36, 0x46, 0x07, 0x7B, 0xC5, 0x34, 0x8D,
			0x2B, 0xB5, 0x1F, 0x05, 0x58, 0x6E, 0xBC, 0xD7,
			0xA2, 0x43, 0x01, 0x9A, 0xB7, 0x94, 0xF4, 0xC5,
			0x7B, 0x1B, 0x9B, 0x48, 0xF9, 0xCD, 0x35, 0x88,
			0x97, 0x7F, 0x94, 0x80, 0x7D, 0xA3, 0xEC, 0x8C,
			0xD5, 0xF2, 0xAA, 0x9C, 0x67, 0x2F, 0x60, 0x95
		},
		.len_bits = 128 << 3,
	},
	.digest_enc = {
		.data = {
			0x67, 0x2F, 0x60, 0x95
		},
		.len = 4,
		.offset = 124,
	},
	.validDataLen = {
		.len_bits = 128 << 3,
	},
	.validCipherLen = {
		.len_bits = 126 << 3,
	},
	.validAuthLen = {
		.len_bits = 124 << 3,
	}
};

struct mixed_cipher_auth_test_data auth_zuc_cipher_snow_test_case_1 = {
	.auth_algo = RTE_CRYPTO_AUTH_ZUC_EIA3,
	.auth_key = {
		.data = {
			0x7F, 0x6F, 0x06, 0xF9, 0xC0, 0x06, 0xA8, 0x41,
			0x7D, 0x59, 0xAA, 0x68, 0x5B, 0x16, 0x64, 0x2F
		},
		.len = 16,
	},
	.auth_iv = {
		.data = {
			0x02, 0xD3, 0x25, 0xB6, 0xCA, 0x12, 0x2F, 0xD2,
			0xA1, 0xF1, 0xBB, 0x8A, 0xAA, 0xF3, 0xD5, 0x67
		},
		.len = 16,
	},
	.auth = {
		.len_bits = 73 << 3,
		.offset_bits = 0,
	},
	.cipher_algo = RTE_CRYPTO_CIPHER_SNOW3G_UEA2,
	.cipher_key = {
		.data = {
			0x3B, 0x0B, 0x5F, 0x98, 0xB2, 0x0F, 0x6F, 0xFA,
			0xE1, 0xB4, 0xD1, 0x80, 0x47, 0xEA, 0x43, 0x0A
		},
		.len = 16,
	},
	.cipher_iv = {
		.data = {
			0x1A, 0xDA, 0x4B, 0x29, 0xAC, 0xD5, 0xD4, 0x57,
			0xD4, 0xE4, 0x66, 0xCC, 0x7F, 0xD6, 0x33, 0xBA
		},
		.len = 16,
	},
	.cipher = {
		.len_bits = 77 << 3,
		.offset_bits = 0,
	},
	.plaintext = {
		.data = {
			0x66, 0x4D, 0x6C, 0x7F, 0x60, 0x79, 0x28, 0xE0,
			0xFC, 0xE6, 0x81, 0xBC, 0x4E, 0xF3, 0x97, 0x3C,
			0x73, 0xC6, 0x1B, 0x39, 0x54, 0x55, 0x22, 0xB8,
			0x70, 0x14, 0x45, 0x8A, 0x25, 0x95, 0xB7, 0x8C,
			0xE3, 0x23, 0x0B, 0x43, 0x9D, 0x33, 0x23, 0x9A,
			0x1A, 0xA5, 0x56, 0x68, 0x98, 0xED, 0xA4, 0x0C,
			0xB3, 0xC0, 0x46, 0x08, 0x15, 0x69, 0xC0, 0x86,
			0x7D, 0x06, 0x10, 0xA2, 0x9C, 0xC7, 0x2F, 0x7F,
			0xEB, 0x3A, 0xC2, 0x88, 0x6E, 0xE6, 0x23, 0x88,
			0x8C
		},
		.len_bits = 73 << 3,
	},
	.ciphertext = {
		.data = {
			0x3F, 0x6B, 0xB9, 0x44, 0x9F, 0xEB, 0x8B, 0x2F,
			0xC6, 0x75, 0xF2, 0x41, 0x79, 0x43, 0x7D, 0x9C,
			0xE8, 0xBC, 0x5B, 0x12, 0xDE, 0x25, 0x53, 0x04,
			0xB5, 0xE1, 0xB9, 0x8B, 0x7C, 0x47, 0x46, 0x8C,
			0x05, 0x0C, 0x40, 0xDC, 0x63, 0x78, 0x61, 0xE1,
			0x7F, 0x11, 0x34, 0xB0, 0x6B, 0x31, 0x63, 0x7D,
			0x21, 0xE9, 0xF4, 0x2E, 0xB0, 0x9B, 0xDC, 0x39,
			0x39, 0x5C, 0x35, 0x9D, 0x06, 0x17, 0x74, 0xFB,
			0x7D, 0xB2, 0x14, 0x08, 0x42, 0x5B, 0xCB, 0x5E,
			0x7D, 0xD9, 0xDD, 0x71, 0xF8
		},
		.len_bits = 77 << 3,
	},
	.digest_enc = {
		.data = {
			0xD9, 0xDD, 0x71, 0xF8
		},
		.len = 4,
		.offset = 73,
	},
	.validDataLen = {
		.len_bits = 77 << 3,
	},
	.validCipherLen = {
		.len_bits = 77 << 3,
	},
	.validAuthLen = {
		.len_bits = 73 << 3,
	}
};

struct mixed_cipher_auth_test_data auth_aes_cmac_cipher_snow_test_case_1 = {
	.auth_algo = RTE_CRYPTO_AUTH_AES_CMAC,
	.auth_key = {
		.data = {
			0x33, 0xC3, 0x0D, 0x56, 0x96, 0x20, 0xFC, 0x6A,
			0xA7, 0x69, 0x1E, 0xAD, 0x1E, 0x92, 0x7D, 0x3F
		},
		.len = 16,
	},
	.auth_iv = {
		.data = {
		},
		.len = 0,
	},
	.auth = {
		.len_bits = 512 << 3,
		.offset_bits = 0,
	},
	.cipher_algo = RTE_CRYPTO_CIPHER_SNOW3G_UEA2,
	.cipher_key = {
		.data = {
			0x5D, 0x22, 0x7E, 0x01, 0xBB, 0x00, 0x2F, 0xC1,
			0xA1, 0x05, 0xC0, 0x4A, 0x58, 0x41, 0xE4, 0xBC
		},
		.len = 16,
	},
	.cipher_iv = {
		.data = {
		},
		.len = 0,
	},
	.cipher = {
		.len_bits = 516 << 3,
		.offset_bits = 0,
	},
	.plaintext = {
		.data = {
			0x4D, 0x2C, 0x50, 0x85, 0x00, 0xEC, 0x27, 0x7F,
			0xFB, 0xF2, 0xD8, 0x8F, 0xC0, 0x51, 0xC9, 0x47,
			0xFD, 0xC9, 0x10, 0x8D, 0xEE, 0xC9, 0xF1, 0x94,
			0x34, 0xD6, 0xD2, 0x14, 0xFB, 0x61, 0xE4, 0x49,
			0x8D, 0x35, 0xCE, 0x8E, 0x21, 0xF5, 0x0D, 0x1D,
			0xE8, 0xE6, 0xAC, 0xA8, 0x37, 0x76, 0xF0, 0x35,
			0x3F, 0x00, 0xC3, 0x2D, 0xC9, 0xB4, 0xC2, 0xFE,
			0x8B, 0x94, 0x12, 0x86, 0xF5, 0xF6, 0xCF, 0x83,
			0x2C, 0x9E, 0x12, 0x4E, 0x94, 0x20, 0x6B, 0x7C,
			0x06, 0x18, 0x24, 0x3E, 0x8E, 0x15, 0x73, 0xCE,
			0x16, 0x37, 0xFC, 0xDF, 0xEB, 0xBE, 0xDE, 0x76,
			0x53, 0xF0, 0xFD, 0x49, 0xE6, 0xCD, 0xCD, 0x13,
			0x6B, 0xE0, 0x61, 0xFF, 0x00, 0xCD, 0x7C, 0x07,
			0xE5, 0xA0, 0x45, 0x74, 0xB6, 0xB9, 0x43, 0xCC,
			0xF0, 0x3F, 0xAC, 0xDC, 0xFE, 0x8A, 0x53, 0x52,
			0x7A, 0x51, 0x9B, 0x61, 0x1E, 0x69, 0x74, 0x8A,
			0x49, 0xD5, 0x8A, 0x4A, 0xA2, 0x06, 0x51, 0x88,
			0xA7, 0x96, 0xFD, 0x5D, 0x50, 0x40, 0x29, 0x41,
			0x80, 0xD6, 0x1E, 0x7E, 0x60, 0x71, 0xD0, 0xDA,
			0xC2, 0x6C, 0x3B, 0xE1, 0xD5, 0xB0, 0x6B, 0x1F,
			0x86, 0xF5, 0x69, 0x29, 0xFC, 0xBA, 0xB1, 0xA3,
			0x51, 0xAF, 0x01, 0xA1, 0xEF, 0x2B, 0xE3, 0x6F,
			0x01, 0x01, 0xEE, 0x61, 0x72, 0xBE, 0x3C, 0x35,
			0x2A, 0x78, 0x16, 0x00, 0x28, 0x82, 0x1F, 0xAE,
			0x78, 0x88, 0xD7, 0x74, 0x43, 0x89, 0x18, 0x94,
			0x38, 0x1A, 0x36, 0x28, 0x45, 0x19, 0x97, 0x47,
			0x1A, 0x86, 0xA8, 0x8D, 0x44, 0xE4, 0xC2, 0x6F,
			0x5D, 0xD8, 0x6F, 0x85, 0x5B, 0x8F, 0x33, 0xD3,
			0x17, 0x0B, 0x47, 0x5A, 0x94, 0x60, 0xEF, 0xCC,
			0x7A, 0x25, 0xF5, 0xC0, 0x3E, 0x8C, 0x07, 0x59,
			0x12, 0xAF, 0xE6, 0x57, 0x94, 0xA8, 0xC7, 0xF1,
			0x81, 0x36, 0x77, 0xDC, 0xC5, 0xAA, 0xAF, 0xDD,
			0xB6, 0xF7, 0x38, 0x4A, 0x58, 0x28, 0x17, 0xD2,
			0x4D, 0x0C, 0x93, 0x8C, 0x99, 0x9A, 0xE5, 0xAC,
			0x49, 0xCB, 0x04, 0xDE, 0x74, 0xCB, 0xD0, 0xF5,
			0x02, 0x47, 0xD1, 0xC8, 0xF2, 0x81, 0xA6, 0xA8,
			0x79, 0xDE, 0xF3, 0xD1, 0x07, 0x0B, 0xA4, 0x54,
			0x18, 0x37, 0xE1, 0xB2, 0xD1, 0xC6, 0x5F, 0x1B,
			0x92, 0x63, 0xFA, 0x06, 0x2F, 0xCA, 0xFB, 0x31,
			0x12, 0xCD, 0xF9, 0x05, 0x4F, 0x9F, 0xAE, 0xC8,
			0x7E, 0xA2, 0x9A, 0x85, 0xAE, 0x3F, 0xDA, 0xC6,
			0x77, 0xBB, 0x79, 0x49, 0x82, 0xD8, 0x65, 0x15,
			0x3C, 0x5F, 0x1B, 0x6B, 0x2A, 0x17, 0x9D, 0x3D,
			0xE4, 0x97, 0x42, 0x34, 0x36, 0xF0, 0xFC, 0xB5,
			0x92, 0x97, 0x3B, 0x41, 0xD7, 0x16, 0x07, 0x4E,
			0xD1, 0x81, 0x97, 0x54, 0x59, 0xFC, 0x69, 0x96,
			0x5C, 0x85, 0x02, 0x86, 0x9C, 0x9F, 0xC4, 0x80,
			0x37, 0x06, 0xB4, 0x6D, 0xF7, 0xB1, 0x23, 0x8A,
			0x49, 0x5F, 0xCB, 0x20, 0x75, 0xD3, 0x6F, 0x47,
			0x54, 0x06, 0x9B, 0xAE, 0x03, 0x05, 0x44, 0x60,
			0x8A, 0x47, 0xE7, 0x26, 0xE6, 0xAB, 0xA7, 0x1D,
			0xB1, 0x5C, 0x8B, 0xA9, 0x0E, 0xAF, 0x33, 0x57,
			0x0E, 0xFE, 0x77, 0x83, 0xD2, 0xE6, 0xCA, 0x26,
			0xED, 0x66, 0xD4, 0xF1, 0x6B, 0x19, 0x51, 0xF6,
			0x60, 0x38, 0x1D, 0x47, 0xE3, 0xC4, 0x65, 0x95,
			0x20, 0xF1, 0x3E, 0x2E, 0xA0, 0x72, 0x86, 0xAF,
			0x71, 0xFE, 0x32, 0x43, 0xE5, 0xFD, 0x69, 0xD2,
			0x63, 0x3E, 0xC4, 0xCF, 0x57, 0x15, 0xC6, 0xB8,
			0x4E, 0xE3, 0xFF, 0x32, 0xA7, 0x64, 0xC7, 0xC8,
			0x55, 0x06, 0xF7, 0xF6, 0x78, 0x7D, 0xA5, 0xEA,
			0x7B, 0xD7, 0x2D, 0x60, 0xD5, 0x97, 0x33, 0x38,
			0xD6, 0xF7, 0x08, 0x2E, 0x0D, 0xCE, 0xE6, 0x5C,
			0xB1, 0xE5, 0x8E, 0x59, 0x4A, 0x56, 0x21, 0xA0,
			0x5C, 0x18, 0x96, 0xD5, 0x95, 0x3C, 0xBF, 0x11
		},
		.len_bits = 512 << 3,
	},
	.ciphertext = {
		.data = {
			0x1C, 0x4D, 0x96, 0xE9, 0xB1, 0x63, 0xC2, 0xD7,
			0x0B, 0x5B, 0xEA, 0x92, 0x4A, 0x86, 0x1A, 0xC3,
			0xF0, 0x3D, 0xBA, 0xBD, 0xAC, 0xBD, 0x63, 0x86,
			0x83, 0x53, 0xCE, 0x61, 0xC6, 0x33, 0x59, 0xBC,
			0x4C, 0xB8, 0xAA, 0xA6, 0x1C, 0x11, 0xD2, 0x95,
			0x57, 0x9A, 0xAD, 0x10, 0x78, 0x90, 0xBD, 0x64,
			0x7F, 0x7C, 0xF8, 0x73, 0xA3, 0x47, 0x5C, 0x2A,
			0xAD, 0xFC, 0x48, 0xEB, 0x05, 0x98, 0xFA, 0xF3,
			0x43, 0xEF, 0x85, 0xE7, 0x7D, 0xFF, 0xD8, 0x21,
			0xD3, 0xF4, 0x23, 0xFA, 0x50, 0xC0, 0x8A, 0x87,
			0x4D, 0xA8, 0xD7, 0x46, 0xED, 0xC5, 0xE7, 0xE7,
			0xFD, 0x04, 0x2D, 0x43, 0x41, 0x17, 0x1E, 0x0B,
			0x51, 0x76, 0x98, 0xEE, 0xE8, 0xB2, 0x9C, 0x72,
			0x5F, 0x40, 0x0E, 0xC1, 0x70, 0x8E, 0xB8, 0xFC,
			0xAB, 0xB7, 0x45, 0xB8, 0xD1, 0xB6, 0xBC, 0xE0,
			0xE5, 0x37, 0x63, 0xF9, 0x9F, 0xFF, 0x71, 0x1A,
			0x26, 0x01, 0x81, 0x37, 0x86, 0x4B, 0xB0, 0xC6,
			0x5B, 0xE1, 0x20, 0xD2, 0xBF, 0x25, 0x3B, 0x91,
			0x67, 0x7B, 0x0E, 0x61, 0x93, 0x7B, 0x9B, 0xD0,
			0x85, 0xF3, 0x21, 0xAC, 0x93, 0xC8, 0x0C, 0xFF,
			0xBE, 0x29, 0x88, 0x9F, 0x90, 0xED, 0xDC, 0x66,
			0xB4, 0x13, 0xE2, 0x8F, 0x1F, 0x39, 0xDA, 0xBE,
			0x17, 0x8D, 0x8B, 0x2B, 0x9D, 0xC8, 0xDF, 0x45,
			0x73, 0xD3, 0xCE, 0xF8, 0xC8, 0x51, 0xD3, 0x4D,
			0x25, 0x28, 0x95, 0x19, 0xC4, 0xD5, 0xF6, 0x15,
			0x6A, 0x93, 0x80, 0x41, 0xAB, 0x7C, 0x23, 0x5D,
			0x4D, 0xF1, 0x62, 0xB6, 0x6C, 0xAF, 0xAE, 0x85,
			0x83, 0xC6, 0x70, 0x2F, 0xC0, 0xB4, 0xA2, 0x56,
			0x81, 0x1B, 0x37, 0x59, 0xDF, 0xD7, 0x8D, 0x70,
			0x0B, 0xB1, 0x84, 0xB0, 0x1C, 0x2B, 0xA4, 0x9B,
			0x51, 0xE2, 0x0D, 0x3D, 0x12, 0x5D, 0x1A, 0x04,
			0xCF, 0x4D, 0xCB, 0x7D, 0xD5, 0x45, 0x71, 0xE3,
			0x26, 0x00, 0x32, 0xA7, 0x97, 0x3C, 0xC7, 0xE4,
			0x98, 0x8C, 0x64, 0xD3, 0x33, 0x25, 0xB3, 0xA0,
			0x9B, 0x0E, 0xFA, 0x6A, 0x82, 0x83, 0xAD, 0x0D,
			0x03, 0xBD, 0x51, 0xF6, 0x92, 0x06, 0x0B, 0x09,
			0x0B, 0x8B, 0xB3, 0x40, 0x27, 0xFB, 0x19, 0xC9,
			0x4E, 0x82, 0xD7, 0xCF, 0xE1, 0xC9, 0xBE, 0x79,
			0x48, 0x1E, 0x3B, 0x09, 0x60, 0x80, 0x68, 0xF1,
			0x7F, 0x81, 0x0C, 0xF2, 0xF9, 0x19, 0x48, 0x75,
			0xA7, 0xFD, 0x36, 0x7F, 0xE5, 0x8F, 0x93, 0x73,
			0x40, 0xFC, 0x10, 0xD0, 0xD1, 0xA2, 0x33, 0xFE,
			0x64, 0x99, 0x10, 0x12, 0x22, 0x32, 0x89, 0x82,
			0x8C, 0x45, 0xBA, 0xB4, 0x32, 0x41, 0x1B, 0xA0,
			0x03, 0x69, 0x58, 0xA9, 0xA6, 0x00, 0x7F, 0x29,
			0xAC, 0x4D, 0x00, 0x0D, 0xCD, 0xFA, 0xF3, 0x2B,
			0x03, 0x1D, 0x82, 0x0F, 0xDB, 0x1F, 0xEC, 0xB3,
			0x44, 0x16, 0x4C, 0xB7, 0xBE, 0xDB, 0x5C, 0x31,
			0xAA, 0xE0, 0x97, 0xB5, 0xAE, 0x1D, 0x5F, 0xAB,
			0x86, 0x53, 0x3F, 0xEC, 0xFF, 0x47, 0x85, 0xC5,
			0x79, 0xBF, 0x67, 0xA3, 0x4E, 0x80, 0x8A, 0x8F,
			0x41, 0xC8, 0xDE, 0x8F, 0x5F, 0xE3, 0xAF, 0xC4,
			0x24, 0xDB, 0xAB, 0xBD, 0x83, 0xF7, 0x96, 0x02,
			0xE3, 0x0F, 0xBD, 0xC4, 0x8B, 0xED, 0xA2, 0x69,
			0x06, 0xD3, 0x06, 0xA0, 0x10, 0x9D, 0xC5, 0x43,
			0x71, 0x76, 0x86, 0xA2, 0xBC, 0xA9, 0x7A, 0xF5,
			0xFA, 0xE3, 0x7B, 0x05, 0x63, 0x91, 0x05, 0x2E,
			0x94, 0x88, 0x4A, 0x80, 0xBA, 0x04, 0xF4, 0x1C,
			0x72, 0x7D, 0x54, 0xF5, 0xE3, 0x7D, 0x6D, 0x40,
			0x1C, 0x95, 0xC3, 0x6D, 0x85, 0x98, 0x2F, 0x78,
			0x77, 0xA8, 0x2D, 0x22, 0x53, 0xF3, 0xE8, 0x86,
			0xBA, 0x9C, 0xB8, 0x99, 0x8B, 0x0D, 0x09, 0x89,
			0x15, 0x8B, 0xBC, 0x2B, 0x0C, 0x31, 0x41, 0xC9,
			0x2E, 0x71, 0x68, 0x0B, 0x1E, 0x55, 0xE1, 0x19,
			0x6D, 0x74, 0xC3, 0xD6
		},
		.len_bits = 516 << 3,
	},
	.digest_enc = {
		.data = {
			0x6D, 0x74, 0xC3, 0xD6
		},
		.len = 4,
		.offset = 512,
	},
	.validDataLen = {
		.len_bits = 516 << 3,
	},
	.validCipherLen = {
		.len_bits = 516 << 3,
	},
	.validAuthLen = {
		.len_bits = 512 << 3,
	}
};

struct mixed_cipher_auth_test_data auth_zuc_cipher_aes_ctr_test_case_1 = {
	.auth_algo = RTE_CRYPTO_AUTH_ZUC_EIA3,
	.auth_key = {
		.data = {
			0x64, 0xB2, 0xF5, 0xF5, 0xE0, 0x2D, 0x49, 0x82,
			0x2C, 0xE2, 0x80, 0xCF, 0x91, 0xB0, 0x24, 0x96
		},
		.len = 16,
	},
	.auth_iv = {
		.data = {
			0xE8, 0x97, 0x95, 0xB5, 0x6C, 0x3A, 0xD2, 0x14,
			0xD2, 0xFC, 0x14, 0x74, 0x64, 0x90, 0x18, 0x52
		},
		.len = 16,
	},
	.auth = {
		.len_bits = 73 << 3,
		.offset_bits = 0,
	},
	.cipher_algo = RTE_CRYPTO_CIPHER_AES_CTR,
	.cipher_key = {
		.data = {
			0x6A, 0x7B, 0xB3, 0xF2, 0x75, 0x45, 0xD8, 0x24,
			0x75, 0x93, 0xA4, 0x95, 0x32, 0xEC, 0x88, 0x88
		},
		.len = 16,
	},
	.cipher_iv = {
		.data = {
			0x6B, 0xDF, 0xD1, 0xAF, 0xFE, 0xD1, 0xDE, 0xB4,
			0x98, 0x2A, 0x34, 0xB7, 0x80, 0xC8, 0xF8, 0xBF
		},
		.len = 16,
	},
	.cipher = {
		.len_bits = 77 << 3,
		.offset_bits = 0,
	},
	.plaintext = {
		.data = {
			0x25, 0x96, 0x0A, 0x10, 0xE6, 0xCD, 0x9E, 0x5C,
			0x57, 0xED, 0x4A, 0xAB, 0x1C, 0x3F, 0xE3, 0x62,
			0x86, 0xB4, 0x25, 0x28, 0xD4, 0x16, 0x78, 0x05,
			0x80, 0x5D, 0xAD, 0xC6, 0x54, 0x1F, 0xDA, 0x79,
			0xB6, 0xE4, 0x8A, 0x9C, 0xB2, 0x29, 0xF8, 0x09,
			0x16, 0x42, 0xB4, 0x33, 0x81, 0x98, 0x95, 0x07,
			0x4C, 0xBB, 0x30, 0x21, 0xD1, 0xA9, 0x26, 0x52,
			0x06, 0xD3, 0x18, 0x5A, 0xF3, 0xF3, 0xD4, 0xA9,
			0xD8, 0x5F, 0x46, 0x8A, 0x88, 0x3F, 0x93, 0x9F,
			0x81
		},
		.len_bits = 73 << 3,
	},
	.ciphertext = {
		.data = {
			0xC0, 0x00, 0x83, 0x34, 0x0B, 0x6B, 0x7E, 0x90,
			0x14, 0xE1, 0x1C, 0x93, 0xAC, 0xD5, 0xDD, 0xCF,
			0x75, 0xE0, 0xDA, 0x42, 0xC5, 0xB8, 0xFA, 0x43,
			0x1A, 0x92, 0x1C, 0x6B, 0x01, 0xEC, 0x6E, 0x46,
			0x9B, 0x8C, 0x9A, 0xA2, 0xBB, 0x47, 0x15, 0x70,
			0x02, 0xEB, 0xEB, 0x67, 0x9E, 0x5D, 0x1A, 0x91,
			0x5C, 0xF7, 0x4E, 0x17, 0x15, 0x88, 0x73, 0x34,
			0x8F, 0x22, 0x97, 0xE5, 0xFE, 0x05, 0x09, 0xD9,
			0x5E, 0xC2, 0x98, 0xDD, 0xD5, 0xC4, 0xF9, 0x8A,
			0xC9, 0xB4, 0xD2, 0xBF, 0x95
		},
		.len_bits = 77 << 3,
	},
	.digest_enc = {
		.data = {
			0xB4, 0xD2, 0xBF, 0x95
		},
		.len = 4,
		.offset = 73,
	},
	.validDataLen = {
		.len_bits = 77 << 3,
	},
	.validCipherLen = {
		.len_bits = 77 << 3,
	},
	.validAuthLen = {
		.len_bits = 73 << 3,
	}
};

struct mixed_cipher_auth_test_data auth_snow_cipher_aes_ctr_test_case_1 = {
	.auth_algo = RTE_CRYPTO_AUTH_SNOW3G_UIA2,
	.auth_key = {
		.data = {
			0xAB, 0xE0, 0xC8, 0x0D, 0x7B, 0x67, 0x2E, 0x7F,
			0x21, 0x9F, 0x6E, 0x73, 0x3E, 0x7B, 0x4A, 0x55
		},
		.len = 16,
	},
	.auth_iv = {
		.data = {
			0x2C, 0x43, 0x66, 0x4A, 0x84, 0xF1, 0x34, 0x8F,
			0x43, 0xB5, 0xFD, 0x13, 0x8C, 0x56, 0xB9, 0x8B
		},
		.len = 16,
	},
	.auth = {
		.len_bits = 48 << 3,
		.offset_bits = 0,
	},
	.cipher_algo = RTE_CRYPTO_CIPHER_AES_CTR,
	.cipher_key = {
		.data = {
			0xD3, 0x3F, 0xB7, 0xB6, 0xA0, 0xC5, 0xDF, 0x55,
			0x19, 0x38, 0x8E, 0x0D, 0xF4, 0x27, 0xAE, 0x4D
		},
		.len = 16,
	},
	.cipher_iv = {
		.data = {
			0xD5, 0x22, 0x55, 0xF3, 0xA8, 0xD0, 0x65, 0xE5,
			0x3B, 0xCF, 0x1D, 0x2E, 0xC3, 0x03, 0x1D, 0x04
		},
		.len = 16,
	},
	.cipher = {
		.len_bits = 52 << 3,
		.offset_bits = 0,
	},
	.plaintext = {
		.data = {
			0xC7, 0xAF, 0x2A, 0x7A, 0xF0, 0xBF, 0xDF, 0x25,
			0x99, 0x3F, 0xBA, 0xF7, 0xAF, 0x17, 0x07, 0x15,
			0xB6, 0x9E, 0xDC, 0xF6, 0x1C, 0x4E, 0x9F, 0x3F,
			0xDD, 0x77, 0x26, 0x1C, 0x88, 0x49, 0x9F, 0x4F,
			0xF8, 0xCA, 0xCA, 0xE9, 0x89, 0xA9, 0x0E, 0x23,
			0xE9, 0xC8, 0x1A, 0x98, 0xE0, 0x22, 0xAD, 0x96
		},
		.len_bits = 48 << 3,
	},
	.ciphertext = {
		.data = {
			0xAE, 0x37, 0x3B, 0x27, 0xC9, 0xBD, 0x88, 0x8C,
			0x52, 0xA1, 0xBD, 0xE8, 0x63, 0x62, 0x83, 0xBD,
			0x94, 0x51, 0xC0, 0xAA, 0x51, 0xCA, 0xFD, 0x7F,
			0xF4, 0x8A, 0x55, 0xF9, 0x9B, 0xEF, 0x3F, 0x38,
			0x14, 0xE6, 0x49, 0x61, 0x69, 0x09, 0xAF, 0x1D,
			0x44, 0xC2, 0x00, 0xA6, 0x48, 0xDB, 0x22, 0xAD,
			0x9A, 0x6E, 0x9C, 0x42
		},
		.len_bits = 52 << 3,
	},
	.digest_enc = {
		.data = {
			0x9A, 0x6E, 0x9C, 0x42
		},
		.len = 4,
		.offset = 48,
	},
	.validDataLen = {
		.len_bits = 52 << 3,
	},
	.validCipherLen = {
		.len_bits = 52 << 3,
	},
	.validAuthLen = {
		.len_bits = 48 << 3,
	}
};

struct mixed_cipher_auth_test_data auth_snow_cipher_zuc_test_case_1 = {
	.auth_algo = RTE_CRYPTO_AUTH_SNOW3G_UIA2,
	.auth_key = {
		.data = {
			0x36, 0xB8, 0xFD, 0x7D, 0xB4, 0x2B, 0xD5, 0xE1,
			0x73, 0xAA, 0x51, 0x3C, 0x95, 0x25, 0x6C, 0x1F
		},
		.len = 16,
	},
	.auth_iv = {
		.data = {
			0x94, 0x86, 0xE9, 0x0D, 0xAD, 0x70, 0x39, 0xBE,
			0x65, 0x58, 0xE5, 0x89, 0x4C, 0x0F, 0x5C, 0x4D
		},
		.len = 16,
	},
	.auth = {
		.len_bits = 48 << 3,
		.offset_bits = 0,
	},
	.cipher_algo = RTE_CRYPTO_CIPHER_ZUC_EEA3,
	.cipher_key = {
		.data = {
			0x99, 0xEC, 0x89, 0xCD, 0x39, 0xFD, 0x43, 0xD1,
			0x8B, 0xF3, 0xF9, 0x2E, 0x9F, 0xF0, 0x50, 0x09
		},
		.len = 16,
	},
	.cipher_iv = {
		.data = {
			0xBF, 0x49, 0xF5, 0x73, 0xDB, 0x59, 0xF1, 0x24,
			0x00, 0x09, 0x15, 0x44, 0x51, 0x98, 0xAF, 0xFD
		},
		.len = 16,
	},
	.cipher = {
		.len_bits = 52 << 3,
		.offset_bits = 0,
	},
	.plaintext = {
		.data = {
			0xF9, 0x01, 0x2F, 0x55, 0x44, 0xD7, 0xB1, 0x4C,
			0x40, 0xCC, 0x2C, 0xBA, 0x6E, 0x90, 0x1D, 0xA1,
			0x6A, 0xCA, 0x1E, 0x37, 0x91, 0xE4, 0x57, 0x0B,
			0xDD, 0xF3, 0xB3, 0xF9, 0xF2, 0x53, 0xAA, 0xEB,
			0x55, 0xDA, 0x41, 0x99, 0xB1, 0xF2, 0xE6, 0xF2,
			0xBF, 0x12, 0xAD, 0x2E, 0xA2, 0xCA, 0xCF, 0x0D
		},
		.len_bits = 48 << 3,
	},
	.ciphertext = {
		.data = {
			0xF6, 0xA2, 0x16, 0xFB, 0xE4, 0xA8, 0xED, 0x96,
			0x42, 0x35, 0x2C, 0xBC, 0x22, 0x8F, 0x7C, 0x15,
			0x97, 0xB6, 0xAE, 0x21, 0xE8, 0x2D, 0x11, 0x7B,
			0x00, 0xC1, 0x20, 0x57, 0xC7, 0xB8, 0x17, 0xBB,
			0x21, 0x0B, 0x6E, 0x89, 0x33, 0xAF, 0xDA, 0xD4,
			0xC5, 0xFD, 0xC4, 0xD6, 0x37, 0x18, 0xB9, 0xF4,
			0xAB, 0xBD, 0x62, 0xD0
		},
		.len_bits = 52 << 3,
	},
	.digest_enc = {
		.data = {
			0xAB, 0xBD, 0x62, 0xD0
		},
		.len = 4,
		.offset = 48,
	},
	.validDataLen = {
		.len_bits = 52 << 3,
	},
	.validCipherLen = {
		.len_bits = 52 << 3,
	},
	.validAuthLen = {
		.len_bits = 48 << 3,
	}
};

struct mixed_cipher_auth_test_data auth_aes_cmac_cipher_zuc_test_case_1 = {
	.auth_algo = RTE_CRYPTO_AUTH_AES_CMAC,
	.auth_key = {
		.data = {
			0x2F, 0xEA, 0x31, 0x8A, 0x51, 0x14, 0xCA, 0xE1,
			0x25, 0x77, 0x11, 0x12, 0xEE, 0xBA, 0xE1, 0x1F
		},
		.len = 16,
	},
	.auth_iv = {
		.data = {
		},
		.len = 0,
	},
	.auth = {
		.len_bits = 512 << 3,
		.offset_bits = 0,
	},
	.cipher_algo = RTE_CRYPTO_CIPHER_ZUC_EEA3,
	.cipher_key = {
		.data = {
			0x67, 0x20, 0xEA, 0xEB, 0x38, 0x10, 0x88, 0x07,
			0x64, 0xB9, 0xA5, 0x05, 0x88, 0x2F, 0x4C, 0xBF
		},
		.len = 16,
	},
	.cipher_iv = {
		.data = {
		},
		.len = 0,
	},
	.cipher = {
		.len_bits = 516 << 3,
		.offset_bits = 0,
	},
	.plaintext = {
		.data = {
			0x8F, 0x7E, 0xD7, 0x93, 0xDB, 0x6D, 0xB8, 0x5B,
			0x5A, 0x50, 0xC3, 0x9D, 0xBD, 0x5A, 0x2C, 0xB6,
			0xE6, 0xE3, 0x08, 0x09, 0xA0, 0xAB, 0xA8, 0x4B,
			0x37, 0x31, 0xEA, 0xC0, 0xE6, 0xE2, 0x2A, 0x75,
			0x61, 0x01, 0x09, 0x3C, 0x6E, 0xC1, 0x98, 0xC9,
			0x12, 0x5B, 0x66, 0xCF, 0xB5, 0x93, 0x86, 0x9B,
			0x77, 0x8E, 0xA5, 0x18, 0x39, 0x4D, 0x63, 0x70,
			0x7F, 0x4D, 0x30, 0x66, 0x30, 0x5B, 0xDC, 0x91,
			0x5C, 0xE5, 0xCD, 0xCB, 0xA6, 0x66, 0x94, 0xB8,
			0xC1, 0xFB, 0x88, 0x77, 0x8F, 0x0E, 0x13, 0x06,
			0x9C, 0xB8, 0x1E, 0xD6, 0x06, 0x81, 0x47, 0x86,
			0xCF, 0x78, 0xEC, 0xFF, 0xD3, 0xC8, 0x90, 0x30,
			0xAD, 0x5E, 0xFC, 0x54, 0xC4, 0x91, 0x0D, 0x86,
			0x8C, 0x95, 0xFE, 0x1B, 0xA4, 0x11, 0x22, 0x41,
			0xCA, 0x41, 0x18, 0xD1, 0xC2, 0x5F, 0x57, 0x92,
			0xD8, 0x44, 0x91, 0xAC, 0x0D, 0x22, 0xDC, 0xBA,
			0x81, 0xD9, 0x0F, 0x46, 0x6A, 0x1C, 0xCD, 0xF7,
			0xB1, 0xCB, 0x12, 0x56, 0xDD, 0x35, 0x98, 0xA7,
			0x76, 0xB0, 0x79, 0x39, 0x10, 0xD0, 0xCB, 0xE8,
			0x15, 0x5D, 0x94, 0x22, 0x80, 0x71, 0xDD, 0x01,
			0x4A, 0xEC, 0x48, 0xB5, 0x08, 0x15, 0xAC, 0xB9,
			0xE0, 0xBF, 0x10, 0xBD, 0xF4, 0xA8, 0x65, 0x6B,
			0x58, 0xDE, 0xA4, 0x69, 0xAF, 0x70, 0x51, 0xC4,
			0xCE, 0xE6, 0xE6, 0x4E, 0x57, 0xC4, 0x50, 0xA2,
			0xB0, 0x98, 0x58, 0xB8, 0xAD, 0x04, 0x72, 0x8E,
			0xC4, 0x82, 0x4B, 0xB8, 0x2B, 0xB1, 0x24, 0x84,
			0x8F, 0xC8, 0xED, 0x3F, 0x39, 0x3E, 0x03, 0x07,
			0x25, 0xEA, 0x55, 0x7D, 0xAE, 0xA6, 0x1F, 0x5E,
			0x3E, 0x78, 0x17, 0xEC, 0x7D, 0x89, 0x7A, 0x41,
			0x0B, 0xC6, 0xFA, 0x37, 0x77, 0x1E, 0xBB, 0x07,
			0xE7, 0xA8, 0x47, 0x20, 0xE6, 0x4A, 0x27, 0x0C,
			0x35, 0x7D, 0x89, 0xE4, 0x23, 0xA9, 0x43, 0x62,
			0x21, 0x5A, 0x4E, 0x9E, 0xE3, 0xC9, 0xE0, 0xEF,
			0x8F, 0xDA, 0x26, 0x07, 0xF8, 0xE1, 0x0F, 0xE0,
			0x8A, 0x56, 0x00, 0x71, 0xA1, 0x27, 0x7D, 0xD7,
			0xA5, 0x06, 0xBB, 0xC8, 0xAF, 0xFE, 0x2A, 0xD0,
			0x58, 0x79, 0x6F, 0x3B, 0x42, 0x4F, 0x2B, 0xD2,
			0x29, 0x52, 0xDA, 0x22, 0x33, 0xEA, 0x02, 0xBD,
			0x40, 0x03, 0x2E, 0xE2, 0x2B, 0xAB, 0xB9, 0xD0,
			0xB2, 0x74, 0x98, 0x61, 0x72, 0xC3, 0x32, 0xCB,
			0x3C, 0xA1, 0x07, 0x7F, 0xF0, 0x32, 0x51, 0x1A,
			0x84, 0x2C, 0x3D, 0xB8, 0x16, 0x40, 0x76, 0x57,
			0x43, 0xA5, 0x39, 0x6F, 0x51, 0xF3, 0x3F, 0x03,
			0x68, 0xD8, 0x64, 0xDA, 0x9B, 0x96, 0xA6, 0xD8,
			0x38, 0xAD, 0x57, 0x29, 0xE0, 0xA8, 0x44, 0x64,
			0xD4, 0x81, 0x1D, 0xEB, 0xC1, 0x93, 0x42, 0x05,
			0x39, 0x7C, 0x74, 0x8A, 0x6F, 0xB4, 0x8D, 0xD7,
			0x8C, 0xF2, 0xB2, 0x27, 0x89, 0x58, 0x00, 0xC2,
			0x06, 0x57, 0xEB, 0xE6, 0xFF, 0x2F, 0x4B, 0xD4,
			0xB0, 0x68, 0xBF, 0x72, 0xFC, 0x02, 0x78, 0x36,
			0x7E, 0xED, 0xC0, 0xEE, 0xA1, 0x4E, 0xC6, 0x2E,
			0x41, 0x78, 0x56, 0xCA, 0xD1, 0x56, 0x8D, 0xD8,
			0xAD, 0x78, 0xBE, 0xAD, 0xA7, 0x0A, 0x82, 0x58,
			0x73, 0x42, 0xCB, 0x70, 0x44, 0x44, 0xA6, 0xC3,
			0x32, 0x66, 0xB1, 0xD4, 0xB5, 0x77, 0x02, 0xF6,
			0xF0, 0x58, 0xC1, 0xC2, 0xAF, 0x4E, 0x9A, 0x5C,
			0xC7, 0x59, 0x0A, 0x6F, 0x63, 0x8C, 0xC8, 0xD7,
			0xCE, 0x93, 0x47, 0x12, 0xD8, 0xED, 0xD6, 0x0A,
			0x54, 0x87, 0xDE, 0x09, 0xFF, 0xE1, 0x00, 0xF0,
			0x3A, 0xC2, 0xB3, 0xE9, 0x11, 0x4D, 0x46, 0xD8,
			0xA7, 0x50, 0x47, 0x0A, 0xDC, 0x0F, 0xE1, 0xAA,
			0xA3, 0x29, 0xBD, 0x7B, 0x16, 0x93, 0x86, 0x6B,
			0x1B, 0x65, 0x74, 0x1B, 0x46, 0x75, 0x0B, 0x80,
			0x37, 0xBE, 0x6A, 0x48, 0x0C, 0xB0, 0x20, 0xB3
		},
		.len_bits = 512 << 3,
	},
	.ciphertext = {
		.data = {
			0x96, 0x85, 0xD7, 0x52, 0x16, 0x86, 0x2C, 0x36,
			0x6B, 0x8F, 0x8B, 0x90, 0x47, 0x9B, 0xC9, 0xD7,
			0x44, 0x67, 0xB0, 0xBF, 0xA7, 0x32, 0x79, 0xCD,
			0x14, 0x28, 0x70, 0x12, 0xB7, 0x26, 0xFB, 0xEB,
			0x7A, 0xAA, 0x01, 0x8D, 0xF2, 0x0A, 0x8C, 0x91,
			0xBC, 0xDC, 0x5C, 0x62, 0xB0, 0x5C, 0x54, 0xBF,
			0xB8, 0xB0, 0x5E, 0xE4, 0xCF, 0x91, 0x19, 0x33,
			0x12, 0x59, 0xF0, 0x4E, 0xC7, 0x17, 0x25, 0x2E,
			0x0B, 0x2A, 0x44, 0xC5, 0x82, 0xAB, 0xF4, 0xB3,
			0xDB, 0x87, 0xB9, 0x02, 0xC8, 0xB6, 0xDF, 0x7F,
			0xC7, 0x6F, 0xCE, 0xD8, 0xEB, 0xF8, 0xC9, 0xA1,
			0x4E, 0x52, 0x32, 0x3E, 0x2C, 0xAD, 0xBB, 0x75,
			0xC2, 0xF5, 0x63, 0xD6, 0x5E, 0x72, 0xB5, 0x17,
			0xA8, 0x53, 0x94, 0x53, 0x64, 0x07, 0xF6, 0xB3,
			0x1F, 0xBA, 0x69, 0x31, 0x73, 0xFB, 0xD3, 0xB8,
			0x74, 0x37, 0x85, 0x49, 0x9B, 0x0F, 0x86, 0x47,
			0x52, 0xF0, 0x63, 0x85, 0x74, 0x71, 0xE7, 0x5B,
			0xF2, 0x5E, 0x01, 0x5E, 0x2E, 0x2A, 0x02, 0x6A,
			0x20, 0x52, 0x3D, 0xD1, 0xF0, 0x7E, 0x8C, 0xEE,
			0xA5, 0x8D, 0x9A, 0x58, 0x63, 0x88, 0x5E, 0x99,
			0x29, 0xD3, 0xC8, 0x29, 0x14, 0x6A, 0x74, 0xC8,
			0x97, 0xE2, 0xF9, 0x0C, 0x50, 0xC2, 0x01, 0xE6,
			0x1C, 0x1C, 0x8A, 0x66, 0x00, 0x30, 0xE3, 0xCA,
			0x19, 0x80, 0x65, 0xD7, 0x5F, 0x1F, 0x1E, 0xD7,
			0x1A, 0x6E, 0xC3, 0x73, 0xC0, 0x91, 0x57, 0xC0,
			0x80, 0x8F, 0xD2, 0x51, 0x96, 0x32, 0x12, 0xEF,
			0x01, 0x1A, 0xF3, 0x50, 0x08, 0xE9, 0xAA, 0x05,
			0x67, 0x20, 0x23, 0xE2, 0xEB, 0x1A, 0x07, 0x08,
			0x6D, 0xED, 0x68, 0x67, 0xE6, 0x06, 0xDE, 0x26,
			0xE7, 0x84, 0x9A, 0xC3, 0xD8, 0x9C, 0x62, 0x44,
			0x69, 0xB8, 0xC0, 0x78, 0x39, 0xC0, 0xF8, 0x0B,
			0xF9, 0x6B, 0xE3, 0x05, 0x1A, 0xDB, 0xE4, 0xDE,
			0x76, 0xEF, 0xE8, 0x94, 0xEB, 0x60, 0x6E, 0x69,
			0x1D, 0xA6, 0x5A, 0x66, 0x7D, 0x4E, 0x5C, 0xCD,
			0x63, 0x7D, 0x24, 0x00, 0xB6, 0xB9, 0x17, 0xCE,
			0x2E, 0x3D, 0x05, 0x29, 0x03, 0xD9, 0xD8, 0xF6,
			0x08, 0xB9, 0xDF, 0x8B, 0xD7, 0xE5, 0x16, 0x1B,
			0x44, 0xEB, 0x56, 0x08, 0xA9, 0x36, 0x22, 0xE0,
			0x8C, 0xE3, 0xEF, 0x33, 0x7E, 0xC6, 0xCD, 0x20,
			0x4B, 0x80, 0x5D, 0x42, 0xCE, 0x64, 0x22, 0x53,
			0xFF, 0x56, 0xFD, 0xDE, 0x60, 0x64, 0xB5, 0xFC,
			0x92, 0xDD, 0x5D, 0x8D, 0x0C, 0x9D, 0x2E, 0x2E,
			0xDD, 0x90, 0xA9, 0x3E, 0x92, 0xC3, 0xF3, 0xAA,
			0xFD, 0x68, 0xC0, 0x85, 0x3D, 0xA7, 0x5A, 0x88,
			0x3C, 0xD3, 0x26, 0x77, 0x57, 0x33, 0x50, 0x2E,
			0xA3, 0xFC, 0x0F, 0x67, 0x2C, 0x9E, 0xFD, 0x29,
			0x10, 0xCB, 0xDB, 0x89, 0x88, 0xEA, 0x11, 0x11,
			0x5B, 0x48, 0xDD, 0x03, 0x84, 0x21, 0xAB, 0x0C,
			0x95, 0x49, 0xC9, 0x0E, 0x81, 0x4E, 0xE1, 0x8E,
			0x07, 0x66, 0x43, 0xEF, 0xFE, 0xC2, 0x36, 0xD8,
			0xCE, 0xBD, 0xE7, 0x12, 0xCB, 0x8D, 0xF4, 0xAA,
			0xFB, 0xA9, 0x79, 0xBC, 0x0B, 0xC8, 0xD5, 0x62,
			0xC9, 0xB6, 0x3F, 0x0C, 0x99, 0x74, 0x36, 0x98,
			0xB5, 0x3F, 0x88, 0x74, 0xA8, 0x6C, 0xB8, 0x03,
			0x16, 0x43, 0x47, 0xF8, 0xEA, 0x26, 0x91, 0x07,
			0x85, 0xB2, 0x59, 0xE1, 0x45, 0x22, 0x09, 0x21,
			0x1B, 0x11, 0x14, 0xAA, 0xC9, 0xD6, 0xF7, 0x6E,
			0xF3, 0xC3, 0x1F, 0x00, 0xA0, 0x8B, 0xC3, 0x0E,
			0x47, 0x24, 0x7D, 0x0F, 0x51, 0x2F, 0x13, 0xE2,
			0x80, 0xEA, 0x4F, 0x2C, 0x74, 0x10, 0x8C, 0x60,
			0xF3, 0x5C, 0xC3, 0x09, 0xB8, 0x4E, 0xBC, 0x7C,
			0x92, 0x24, 0x58, 0x35, 0xCA, 0xA0, 0x33, 0xB4,
			0x85, 0x9D, 0x76, 0x56, 0x24, 0x5B, 0x61, 0x8E,
			0xE8, 0x6A, 0x74, 0x01, 0xD1, 0xA7, 0xFD, 0xCB,
			0x2A, 0xB9, 0xE1, 0x12
		},
		.len_bits = 516 << 3,
	},
	.digest_enc = {
		.data = {
			0x2A, 0xB9, 0xE1, 0x12
		},
		.len = 4,
		.offset = 512,
	},
	.validDataLen = {
		.len_bits = 516 << 3,
	},
	.validCipherLen = {
		.len_bits = 516 << 3,
	},
	.validAuthLen = {
		.len_bits = 512 << 3,
	}
};

struct mixed_cipher_auth_test_data auth_null_cipher_snow_test_case_1 = {
	.auth_algo = RTE_CRYPTO_AUTH_NULL,
	.auth_key = {
		.data = {
			0x84, 0x6F, 0x4C, 0x58, 0x2D, 0x69, 0x3A, 0x2D,
			0x5C, 0x59, 0xF0, 0x0B, 0x7A, 0x4B, 0x0A, 0x80
		},
		.len = 16,
	},
	.auth_iv = {
		.data = {
			0x0B, 0x1C, 0x27, 0x11, 0x4B, 0x0C, 0x4F, 0xDF,
			0xC7, 0x21, 0x24, 0x72, 0x68, 0x62, 0x5E, 0xA7
		},
		.len = 16,
	},
	.auth = {
		.len_bits = 44 << 3,
		.offset_bits = 0,
	},
	.cipher_algo = RTE_CRYPTO_CIPHER_SNOW3G_UEA2,
	.cipher_key = {
		.data = {
			0x69, 0xEA, 0x12, 0xA0, 0x43, 0xD0, 0x32, 0xBB,
			0xB8, 0x4F, 0x37, 0x3D, 0x1E, 0xCC, 0x4B, 0xD5
		},
		.len = 16,
	},
	.cipher_iv = {
		.data = {
			0x0E, 0xE3, 0xE2, 0x8B, 0xDD, 0xA2, 0xDB, 0xFF,
			0x8C, 0x4F, 0x45, 0x34, 0x84, 0x1A, 0x3D, 0x14
		},
		.len = 16,
	},
	.cipher = {
		.len_bits = 48 << 3,
		.offset_bits = 0,
	},
	.plaintext = {
		.data = {
			0xA4, 0x85, 0xEA, 0x3E, 0x34, 0x58, 0xF8, 0xF3,
			0x9B, 0xA8, 0xDD, 0xD3, 0x07, 0x1E, 0xA8, 0x2D,
			0xD9, 0x0E, 0xB8, 0x3E, 0xB4, 0x5B, 0x72, 0x32,
			0x35, 0x68, 0x27, 0x9A, 0xBF, 0xAF, 0x84, 0x63,
			0x34, 0x6E, 0xA2, 0x69, 0xC7, 0x9A, 0x5C, 0x62,
			0x42, 0x39, 0x36, 0x4A
		},
		.len_bits = 44 << 3,
	},
	.ciphertext = {
		.data = {
			0x05, 0xFE, 0xB7, 0x63, 0x69, 0x67, 0x4E, 0xEB,
			0xB4, 0x93, 0xAE, 0x11, 0x07, 0x4A, 0x91, 0x0F,
			0x63, 0x54, 0x83, 0x5D, 0x89, 0x15, 0xB1, 0x0E,
			0x8A, 0x7F, 0xA1, 0xD2, 0xFB, 0xAB, 0xB0, 0x52,
			0xF2, 0xFF, 0x9C, 0x8D, 0xEE, 0xB4, 0x06, 0xEF,
			0xA0, 0x7D, 0x9A, 0x18, 0xF2, 0x81, 0xA9, 0x67
		},
		.len_bits = 48 << 3,
	},
	.digest_enc = {
		.data = {
			0xF2, 0x81, 0xA9, 0x67
		},
		.len = 4,
		.offset = 44,
	},
	.validDataLen = {
		.len_bits = 48 << 3,
	},
	.validCipherLen = {
		.len_bits = 48 << 3,
	},
	.validAuthLen = {
		.len_bits = 44 << 3,
	}
};

struct mixed_cipher_auth_test_data auth_null_cipher_zuc_test_case_1 = {
	.auth_algo = RTE_CRYPTO_AUTH_NULL,
	.auth_key = {
		.data = {
			0xAC, 0x33, 0x46, 0x79, 0xD4, 0xFD, 0x0F, 0xA7,
			0x08, 0x72, 0x93, 0x3D, 0xF9, 0xB9, 0x7F, 0x59
		},
		.len = 16,
	},
	.auth_iv = {
		.data = {
			0xD1, 0x2D, 0x96, 0xE4, 0xED, 0x4E, 0x38, 0x6B,
			0x5B, 0xF2, 0x1F, 0xB2, 0xDE, 0x86, 0x6F, 0x17
		},
		.len = 16,
	},
	.auth = {
		.len_bits = 48 << 3,
		.offset_bits = 0,
	},
	.cipher_algo = RTE_CRYPTO_CIPHER_ZUC_EEA3,
	.cipher_key = {
		.data = {
			0x2F, 0x7A, 0x01, 0xF2, 0x65, 0x12, 0x1A, 0xC6,
			0xCC, 0x9E, 0xB1, 0xFD, 0x93, 0xEE, 0xDC, 0xC3
		},
		.len = 16,
	},
	.cipher_iv = {
		.data = {
			0xD5, 0xF4, 0xD2, 0xDE, 0x7F, 0x65, 0xC4, 0x8A,
			0x21, 0x20, 0xBF, 0x76, 0x7B, 0xBC, 0xCF, 0x05
		},
		.len = 16,
	},
	.cipher = {
		.len_bits = 52 << 3,
		.offset_bits = 0,
	},
	.plaintext = {
		.data = {
			0xEB, 0x16, 0xD9, 0x12, 0xD7, 0x9B, 0xE2, 0x7F,
			0xB0, 0xFA, 0xD9, 0x95, 0x80, 0x43, 0xBB, 0x9F,
			0x9D, 0x08, 0x94, 0x01, 0x65, 0x61, 0xCD, 0x1F,
			0xED, 0xDD, 0xDB, 0x95, 0x7C, 0xB1, 0x72, 0x67,
			0xC8, 0x4B, 0x7A, 0xA0, 0xE7, 0x5C, 0x1F, 0x97,
			0x57, 0xF9, 0x2C, 0xD7, 0x3D, 0xE7, 0x77, 0xDB
		},
		.len_bits = 48 << 3,
	},
	.ciphertext = {
		.data = {
			0xCD, 0xB1, 0xA8, 0x28, 0x24, 0x03, 0x89, 0x4E,
			0x81, 0xF9, 0x12, 0x3A, 0x8C, 0x11, 0x75, 0x14,
			0xED, 0xC3, 0xB0, 0xED, 0x3F, 0xFE, 0x54, 0x66,
			0x16, 0x4D, 0x57, 0x2F, 0xA0, 0xA3, 0x6A, 0x41,
			0x47, 0xDB, 0xE4, 0x1E, 0x8E, 0x3E, 0xA9, 0xFD,
			0x9A, 0x9D, 0xBF, 0xD1, 0x6F, 0x1E, 0x8F, 0xF8,
			0x54, 0xB0, 0xA6, 0x25
		},
		.len_bits = 52 << 3,
	},
	.digest_enc = {
		.data = {
			0x54, 0xB0, 0xA6, 0x25
		},
		.len = 4,
		.offset = 48,
	},
	.validDataLen = {
		.len_bits = 52 << 3,
	},
	.validCipherLen = {
		.len_bits = 52 << 3,
	},
	.validAuthLen = {
		.len_bits = 48 << 3,
	}
};

struct mixed_cipher_auth_test_data auth_snow_cipher_null_test_case_1 = {
	.auth_algo = RTE_CRYPTO_AUTH_SNOW3G_UIA2,
	.auth_key = {
		.data = {
			0xDC, 0x21, 0xAD, 0x18, 0x1D, 0x89, 0xDA, 0x3D,
			0x8C, 0x68, 0x73, 0xDD, 0x6A, 0x55, 0xA3, 0x2E
		},
		.len = 16,
	},
	.auth_iv = {
		.data = {
			0xBA, 0x6F, 0x99, 0x27, 0x96, 0xCD, 0xBE, 0x19,
			0x7D, 0x96, 0x06, 0x28, 0xA0, 0xBE, 0x12, 0xDB
		},
		.len = 16,
	},
	.auth = {
		.len_bits = 48 << 3,
		.offset_bits = 0,
	},
	.cipher_algo = RTE_CRYPTO_CIPHER_NULL,
	.cipher_key = {
		.data = {
			0xE1, 0xEA, 0x6A, 0x93, 0xB1, 0x21, 0x69, 0x5F,
			0x53, 0x98, 0x16, 0xA2, 0x09, 0x0F, 0x06, 0x1E
		},
		.len = 16,
	},
	.cipher_iv = {
		.data = {
			0x61, 0x4D, 0x07, 0x4F, 0x39, 0x2B, 0x6D, 0x6E,
			0x75, 0xAD, 0x24, 0x42, 0xD5, 0xE9, 0x74, 0x51
		},
		.len = 16,
	},
	.cipher = {
		.len_bits = 52 << 3,
		.offset_bits = 0,
	},
	.plaintext = {
		.data = {
			0xC0, 0x9C, 0xF3, 0xDF, 0x33, 0xF0, 0xD2, 0xCC,
			0x67, 0xDC, 0xB9, 0x0E, 0x0C, 0x55, 0x64, 0x01,
			0x60, 0x99, 0x4E, 0x79, 0xC9, 0x8C, 0xE9, 0x77,
			0x1C, 0x08, 0x3E, 0x66, 0xAE, 0x3E, 0x95, 0x6F,
			0xDA, 0x89, 0x4F, 0x0E, 0x79, 0x21, 0xDA, 0xE1,
			0xFE, 0x94, 0xEF, 0x0A, 0xE9, 0x54, 0x0B, 0x4A
		},
		.len_bits = 48 << 3,
	},
	.ciphertext = {
		.data = {
			0xC0, 0x9C, 0xF3, 0xDF, 0x33, 0xF0, 0xD2, 0xCC,
			0x67, 0xDC, 0xB9, 0x0E, 0x0C, 0x55, 0x64, 0x01,
			0x60, 0x99, 0x4E, 0x79, 0xC9, 0x8C, 0xE9, 0x77,
			0x1C, 0x08, 0x3E, 0x66, 0xAE, 0x3E, 0x95, 0x6F,
			0xDA, 0x89, 0x4F, 0x0E, 0x79, 0x21, 0xDA, 0xE1,
			0xFE, 0x94, 0xEF, 0x0A, 0xE9, 0x54, 0x0B, 0x4A,
			0x8E, 0xAF, 0x5B, 0x5B
		},
		.len_bits = 52 << 3,
	},
	.digest_enc = {
		.data = {
			0x8E, 0xAF, 0x5B, 0x5B
		},
		.len = 4,
		.offset = 48,
	},
	.validDataLen = {
		.len_bits = 52 << 3,
	},
	.validCipherLen = {
		.len_bits = 52 << 3,
	},
	.validAuthLen = {
		.len_bits = 48 << 3,
	}
};

struct mixed_cipher_auth_test_data auth_zuc_cipher_null_test_case_1 = {
	.auth_algo = RTE_CRYPTO_AUTH_ZUC_EIA3,
	.auth_key = {
		.data = {
			0x57, 0x3E, 0x7B, 0x14, 0x8B, 0x26, 0x70, 0x40,
			0xF7, 0xB7, 0xD3, 0xAE, 0x12, 0xDB, 0x51, 0x1C
		},
		.len = 16,
	},
	.auth_iv = {
		.data = {
			0x58, 0x22, 0x99, 0xD1, 0x95, 0xB1, 0xF5, 0x50,
			0x99, 0xCD, 0x63, 0x4F, 0x5F, 0x37, 0x41, 0xD2
		},
		.len = 16,
	},
	.auth = {
		.len_bits = 73 << 3,
		.offset_bits = 0,
	},
	.cipher_algo = RTE_CRYPTO_CIPHER_NULL,
	.cipher_key = {
		.data = {
			0xDB, 0x87, 0x38, 0x0F, 0x9F, 0xBE, 0x7D, 0xE1,
			0x3E, 0xE6, 0xF5, 0xF3, 0xB0, 0x15, 0xB3, 0x8B
		},
		.len = 16,
	},
	.cipher_iv = {
		.data = {
			0x01, 0x00, 0x88, 0x7A, 0x39, 0x90, 0xA7, 0x25,
			0x12, 0xE7, 0x02, 0x6A, 0x97, 0xE3, 0x25, 0xCC
		},
		.len = 16,
	},
	.cipher = {
		.len_bits = 77 << 3,
		.offset_bits = 0,
	},
	.plaintext = {
		.data = {
			0x72, 0x0B, 0x5C, 0x00, 0x7F, 0x7D, 0x1F, 0xE4,
			0xED, 0x55, 0x1D, 0xB1, 0x01, 0xF4, 0x0C, 0x59,
			0x53, 0xEF, 0xBB, 0x9C, 0x40, 0x07, 0x3B, 0x2E,
			0x07, 0xB1, 0x57, 0xED, 0x7B, 0x9C, 0xD9, 0xEE,
			0xA7, 0x36, 0xEE, 0x27, 0xB3, 0x0E, 0x0B, 0xA1,
			0x63, 0x28, 0x53, 0x64, 0x1D, 0x5F, 0xBE, 0x70,
			0x4F, 0x79, 0x0D, 0x8F, 0x80, 0x49, 0xBE, 0x88,
			0xFA, 0x15, 0x75, 0x75, 0xB1, 0x4F, 0x64, 0x59,
			0x85, 0x52, 0x80, 0x39, 0x60, 0x8C, 0xDB, 0xC3,
			0xB5
		},
		.len_bits = 73 << 3,
	},
	.ciphertext = {
		.data = {
			0x72, 0x0B, 0x5C, 0x00, 0x7F, 0x7D, 0x1F, 0xE4,
			0xED, 0x55, 0x1D, 0xB1, 0x01, 0xF4, 0x0C, 0x59,
			0x53, 0xEF, 0xBB, 0x9C, 0x40, 0x07, 0x3B, 0x2E,
			0x07, 0xB1, 0x57, 0xED, 0x7B, 0x9C, 0xD9, 0xEE,
			0xA7, 0x36, 0xEE, 0x27, 0xB3, 0x0E, 0x0B, 0xA1,
			0x63, 0x28, 0x53, 0x64, 0x1D, 0x5F, 0xBE, 0x70,
			0x4F, 0x79, 0x0D, 0x8F, 0x80, 0x49, 0xBE, 0x88,
			0xFA, 0x15, 0x75, 0x75, 0xB1, 0x4F, 0x64, 0x59,
			0x85, 0x52, 0x80, 0x39, 0x60, 0x8C, 0xDB, 0xC3,
			0xB5, 0x8E, 0x30, 0xD8, 0xF7
		},
		.len_bits = 77 << 3,
	},
	.digest_enc = {
		.data = {
			0x8E, 0x30, 0xD8, 0xF7
		},
		.len = 4,
		.offset = 73,
	},
	.validDataLen = {
		.len_bits = 77 << 3,
	},
	.validCipherLen = {
		.len_bits = 77 << 3,
	},
	.validAuthLen = {
		.len_bits = 73 << 3,
	}
};

struct mixed_cipher_auth_test_data auth_null_cipher_aes_ctr_test_case_1 = {
	.auth_algo = RTE_CRYPTO_AUTH_NULL,
	.auth_key = {
		.data = {
			0x1B, 0xEB, 0x4C, 0x29, 0xA4, 0x5D, 0x51, 0xBB,
			0x67, 0x6F, 0xBD, 0xCD, 0xB9, 0xA1, 0xF2, 0xD4
		},
		.len = 16,
	},
	.auth_iv = {
		.data = {
			0x55, 0x22, 0x06, 0x8B, 0x8C, 0x5A, 0x12, 0x62,
			0x28, 0x33, 0xD3, 0xC3, 0xD7, 0x99, 0x5F, 0x78
		},
		.len = 16,
	},
	.auth = {
		.len_bits = 48 << 3,
		.offset_bits = 0,
	},
	.cipher_algo = RTE_CRYPTO_CIPHER_AES_CTR,
	.cipher_key = {
		.data = {
			0x34, 0xF1, 0xF1, 0x9B, 0x05, 0x1F, 0x75, 0x3F,
			0x99, 0x61, 0xE7, 0x0F, 0x8D, 0x84, 0x4E, 0x26
		},
		.len = 16,
	},
	.cipher_iv = {
		.data = {
			0x35, 0x54, 0x90, 0x58, 0x8E, 0xAA, 0xFB, 0x4F,
			0xBD, 0x78, 0xF7, 0xB1, 0x5B, 0xDF, 0xBF, 0xDC
		},
		.len = 16,
	},
	.cipher = {
		.len_bits = 52 << 3,
		.offset_bits = 0,
	},
	.plaintext = {
		.data = {
			0x70, 0x8D, 0xCA, 0x3B, 0xF8, 0xA8, 0x3C, 0xF8,
			0x7D, 0xBC, 0x0E, 0xA7, 0xF9, 0xD9, 0xAD, 0x81,
			0x31, 0x1B, 0xA3, 0x92, 0x9A, 0x0B, 0x14, 0xC6,
			0x9F, 0x43, 0x05, 0xF4, 0x44, 0x94, 0xBB, 0xB4,
			0x22, 0x85, 0xEF, 0x1A, 0x2D, 0x2C, 0x13, 0xAB,
			0xE9, 0x22, 0x52, 0xE3, 0xFB, 0x00, 0x65, 0x2C
		},
		.len_bits = 48 << 3,
	},
	.ciphertext = {
		.data = {
			0x08, 0x87, 0xB1, 0x72, 0xFE, 0x87, 0xD3, 0x96,
			0xC1, 0x98, 0xA4, 0xDE, 0x1F, 0x68, 0x05, 0xF6,
			0xBA, 0xF2, 0x5B, 0xF1, 0xE4, 0xA2, 0xA3, 0x15,
			0x62, 0x8F, 0xC5, 0xCF, 0x0C, 0xA1, 0x2D, 0xFB,
			0x09, 0xDE, 0x34, 0x96, 0x29, 0x25, 0x9C, 0x1F,
			0xBF, 0x70, 0x45, 0xD2, 0x9C, 0xD4, 0x33, 0xCA,
			0xD8, 0xCF, 0x6A, 0x8A
		},
		.len_bits = 52 << 3,
	},
	.digest_enc = {
		.data = {
			0xD8, 0xCF, 0x6A, 0x8A
		},
		.len = 4,
		.offset = 48,
	},
	.validDataLen = {
		.len_bits = 52 << 3,
	},
	.validCipherLen = {
		.len_bits = 52 << 3,
	},
	.validAuthLen = {
		.len_bits = 48 << 3,
	}
};

struct mixed_cipher_auth_test_data auth_aes_cmac_cipher_null_test_case_1 = {
	.auth_algo = RTE_CRYPTO_AUTH_AES_CMAC,
	.auth_key = {
		.data = {
			0x9A, 0x4F, 0x56, 0x21, 0xA5, 0x11, 0xF4, 0xDD,
			0x98, 0xEC, 0x3D, 0xE2, 0x7E, 0x60, 0x00, 0x31
		},
		.len = 16,
	},
	.auth_iv = {
		.data = {
		},
		.len = 0,
	},
	.auth = {
		.len_bits = 512 << 3,
		.offset_bits = 0,
	},
	.cipher_algo = RTE_CRYPTO_CIPHER_NULL,
	.cipher_key = {
		.data = {
			0x9C, 0xB3, 0x75, 0x5E, 0xAE, 0x1D, 0xFA, 0x6E,
			0x3C, 0x04, 0xCE, 0x84, 0xCD, 0xBC, 0x71, 0x68
		},
		.len = 16,
	},
	.cipher_iv = {
		.data = {
		},
		.len = 0,
	},
	.cipher = {
		.len_bits = 516 << 3,
		.offset_bits = 0,
	},
	.plaintext = {
		.data = {
			0x43, 0x11, 0xE2, 0x86, 0x51, 0x7A, 0x2A, 0xC2,
			0x32, 0x1C, 0x6C, 0x1D, 0x82, 0xE7, 0x52, 0x5F,
			0xEF, 0x28, 0xD8, 0x86, 0x78, 0x30, 0xAA, 0x97,
			0xC6, 0xE7, 0xDF, 0x3D, 0x6E, 0x17, 0xD4, 0xB2,
			0x28, 0xB7, 0x39, 0x7A, 0x31, 0x63, 0x3D, 0x64,
			0x7F, 0xA9, 0x81, 0x02, 0x90, 0xD4, 0x62, 0x80,
			0xFC, 0x3A, 0x06, 0x75, 0x6B, 0xB1, 0x0C, 0x31,
			0x99, 0xEC, 0x6F, 0x08, 0x03, 0x43, 0xBB, 0x2C,
			0xFB, 0xF4, 0xA7, 0x2D, 0x58, 0xE4, 0x92, 0xD8,
			0x8D, 0x13, 0xDA, 0x1E, 0xE7, 0x3D, 0x9F, 0xE4,
			0x77, 0xA6, 0x59, 0xE2, 0x57, 0x66, 0x14, 0xF1,
			0x52, 0x83, 0xFA, 0x56, 0xC7, 0xB5, 0x83, 0xC2,
			0xAA, 0x2A, 0xF0, 0x02, 0x0E, 0x82, 0xDA, 0x9C,
			0x95, 0xB5, 0xBB, 0x7D, 0xF2, 0x5A, 0x61, 0x6A,
			0x00, 0xBB, 0x4C, 0x58, 0x21, 0x60, 0x4A, 0x74,
			0xE4, 0x44, 0xCB, 0xAB, 0xFA, 0x4F, 0x6E, 0xA4,
			0x79, 0x5E, 0xA7, 0x88, 0xE0, 0x82, 0x25, 0x76,
			0x38, 0xE0, 0xF3, 0x2B, 0x3B, 0x55, 0x95, 0x3C,
			0x11, 0xE2, 0x94, 0x33, 0x42, 0xDF, 0xA8, 0x26,
			0x23, 0x74, 0xD2, 0x1E, 0xC3, 0x40, 0xC3, 0x3C,
			0x9E, 0x6A, 0xC5, 0x7E, 0xED, 0xEA, 0xF4, 0x25,
			0xCB, 0xE8, 0x50, 0x06, 0x3E, 0xE6, 0x42, 0x4F,
			0xC8, 0xD7, 0x82, 0x0B, 0xB6, 0x2A, 0x32, 0xDA,
			0x9E, 0x04, 0xF8, 0x62, 0x45, 0xBC, 0x9E, 0xE3,
			0x26, 0x64, 0x62, 0x14, 0x4E, 0x57, 0x39, 0x19,
			0x3F, 0x8A, 0x20, 0x7D, 0x71, 0x63, 0xCD, 0x3A,
			0x3A, 0x4F, 0x45, 0xF0, 0x7A, 0x78, 0xCB, 0x19,
			0x7D, 0xC3, 0x7B, 0xC2, 0x80, 0x1A, 0xA5, 0xA6,
			0x7E, 0x08, 0xBB, 0xCD, 0x5F, 0xF5, 0xE7, 0x9E,
			0x80, 0x07, 0x1C, 0xF1, 0x6A, 0xE9, 0x2B, 0xA5,
			0x39, 0x71, 0x96, 0xB4, 0xE9, 0x61, 0xCD, 0x66,
			0x25, 0x49, 0x29, 0xA5, 0x64, 0xCE, 0x4C, 0xE2,
			0xD6, 0x07, 0xB0, 0x36, 0xFC, 0x97, 0xD4, 0x7D,
			0x9F, 0xF1, 0x6E, 0x0A, 0xDB, 0x9A, 0xAF, 0x14,
			0x0B, 0x45, 0xC8, 0xF5, 0xA7, 0x96, 0x5C, 0xCC,
			0xDF, 0x85, 0x71, 0x43, 0x54, 0xBE, 0x26, 0x2B,
			0xC5, 0xD7, 0x61, 0xC2, 0x6F, 0x36, 0x3F, 0x0E,
			0x27, 0xAE, 0x19, 0x02, 0x48, 0xC8, 0x17, 0x54,
			0x0E, 0xDF, 0x4A, 0xB5, 0x76, 0xA7, 0x82, 0x56,
			0x2C, 0xF3, 0x99, 0x81, 0xB2, 0xC0, 0xAC, 0x78,
			0x97, 0x0E, 0x3A, 0x07, 0x44, 0x7A, 0x15, 0x6C,
			0x28, 0x2E, 0x6E, 0x71, 0xF7, 0x86, 0xC6, 0x06,
			0x65, 0x11, 0xBB, 0xDC, 0xB8, 0x3D, 0x32, 0xE5,
			0x31, 0xCC, 0x66, 0xE3, 0x8C, 0x13, 0x5B, 0x24,
			0x21, 0x96, 0x2B, 0x66, 0x11, 0x41, 0xD2, 0x3A,
			0x70, 0x41, 0xAB, 0x68, 0xC7, 0x72, 0x6E, 0x2D,
			0x83, 0x29, 0x09, 0x3B, 0x67, 0x3B, 0x21, 0x98,
			0x07, 0x88, 0x7C, 0x94, 0x9C, 0xD7, 0xB9, 0xBD,
			0x6E, 0xE4, 0x24, 0x7F, 0x26, 0xF6, 0xB9, 0x96,
			0x37, 0x65, 0xFF, 0xFF, 0xD7, 0x6D, 0x2C, 0x5B,
			0x96, 0x35, 0x97, 0xFD, 0x71, 0xB8, 0x96, 0x79,
			0x40, 0x12, 0x0D, 0xDC, 0xEA, 0xC6, 0x9A, 0x58,
			0xAB, 0xBE, 0xD8, 0xD2, 0xB5, 0x91, 0x69, 0xED,
			0xF6, 0x68, 0xEC, 0xCE, 0xD5, 0x19, 0x29, 0x6B,
			0x4E, 0xC0, 0x69, 0xC0, 0x79, 0xFF, 0x39, 0xBA,
			0x12, 0x46, 0x96, 0xFC, 0x0D, 0x31, 0x55, 0xB9,
			0xF0, 0x2D, 0x8B, 0xA6, 0xBF, 0xF4, 0x93, 0xB6,
			0x5C, 0x80, 0x85, 0x31, 0x99, 0xAE, 0x9D, 0xE8,
			0x6F, 0x07, 0xA8, 0xE8, 0x06, 0xE2, 0xA2, 0x19,
			0x29, 0x39, 0x16, 0x36, 0x6A, 0x6B, 0xEF, 0x5B,
			0x99, 0x7A, 0x01, 0x59, 0x6F, 0x95, 0x10, 0xCB,
			0x16, 0x95, 0xFD, 0xAF, 0x43, 0x9A, 0x98, 0xB3,
			0xA1, 0x41, 0x9B, 0xA8, 0x23, 0x3E, 0xC2, 0x4C,
			0x78, 0xD8, 0x83, 0xE3, 0x44, 0x72, 0x3E, 0xDE
		},
		.len_bits = 512 << 3,
	},
	.ciphertext = {
		.data = {
			0x43, 0x11, 0xE2, 0x86, 0x51, 0x7A, 0x2A, 0xC2,
			0x32, 0x1C, 0x6C, 0x1D, 0x82, 0xE7, 0x52, 0x5F,
			0xEF, 0x28, 0xD8, 0x86, 0x78, 0x30, 0xAA, 0x97,
			0xC6, 0xE7, 0xDF, 0x3D, 0x6E, 0x17, 0xD4, 0xB2,
			0x28, 0xB7, 0x39, 0x7A, 0x31, 0x63, 0x3D, 0x64,
			0x7F, 0xA9, 0x81, 0x02, 0x90, 0xD4, 0x62, 0x80,
			0xFC, 0x3A, 0x06, 0x75, 0x6B, 0xB1, 0x0C, 0x31,
			0x99, 0xEC, 0x6F, 0x08, 0x03, 0x43, 0xBB, 0x2C,
			0xFB, 0xF4, 0xA7, 0x2D, 0x58, 0xE4, 0x92, 0xD8,
			0x8D, 0x13, 0xDA, 0x1E, 0xE7, 0x3D, 0x9F, 0xE4,
			0x77, 0xA6, 0x59, 0xE2, 0x57, 0x66, 0x14, 0xF1,
			0x52, 0x83, 0xFA, 0x56, 0xC7, 0xB5, 0x83, 0xC2,
			0xAA, 0x2A, 0xF0, 0x02, 0x0E, 0x82, 0xDA, 0x9C,
			0x95, 0xB5, 0xBB, 0x7D, 0xF2, 0x5A, 0x61, 0x6A,
			0x00, 0xBB, 0x4C, 0x58, 0x21, 0x60, 0x4A, 0x74,
			0xE4, 0x44, 0xCB, 0xAB, 0xFA, 0x4F, 0x6E, 0xA4,
			0x79, 0x5E, 0xA7, 0x88, 0xE0, 0x82, 0x25, 0x76,
			0x38, 0xE0, 0xF3, 0x2B, 0x3B, 0x55, 0x95, 0x3C,
			0x11, 0xE2, 0x94, 0x33, 0x42, 0xDF, 0xA8, 0x26,
			0x23, 0x74, 0xD2, 0x1E, 0xC3, 0x40, 0xC3, 0x3C,
			0x9E, 0x6A, 0xC5, 0x7E, 0xED, 0xEA, 0xF4, 0x25,
			0xCB, 0xE8, 0x50, 0x06, 0x3E, 0xE6, 0x42, 0x4F,
			0xC8, 0xD7, 0x82, 0x0B, 0xB6, 0x2A, 0x32, 0xDA,
			0x9E, 0x04, 0xF8, 0x62, 0x45, 0xBC, 0x9E, 0xE3,
			0x26, 0x64, 0x62, 0x14, 0x4E, 0x57, 0x39, 0x19,
			0x3F, 0x8A, 0x20, 0x7D, 0x71, 0x63, 0xCD, 0x3A,
			0x3A, 0x4F, 0x45, 0xF0, 0x7A, 0x78, 0xCB, 0x19,
			0x7D, 0xC3, 0x7B, 0xC2, 0x80, 0x1A, 0xA5, 0xA6,
			0x7E, 0x08, 0xBB, 0xCD, 0x5F, 0xF5, 0xE7, 0x9E,
			0x80, 0x07, 0x1C, 0xF1, 0x6A, 0xE9, 0x2B, 0xA5,
			0x39, 0x71, 0x96, 0xB4, 0xE9, 0x61, 0xCD, 0x66,
			0x25, 0x49, 0x29, 0xA5, 0x64, 0xCE, 0x4C, 0xE2,
			0xD6, 0x07, 0xB0, 0x36, 0xFC, 0x97, 0xD4, 0x7D,
			0x9F, 0xF1, 0x6E, 0x0A, 0xDB, 0x9A, 0xAF, 0x14,
			0x0B, 0x45, 0xC8, 0xF5, 0xA7, 0x96, 0x5C, 0xCC,
			0xDF, 0x85, 0x71, 0x43, 0x54, 0xBE, 0x26, 0x2B,
			0xC5, 0xD7, 0x61, 0xC2, 0x6F, 0x36, 0x3F, 0x0E,
			0x27, 0xAE, 0x19, 0x02, 0x48, 0xC8, 0x17, 0x54,
			0x0E, 0xDF, 0x4A, 0xB5, 0x76, 0xA7, 0x82, 0x56,
			0x2C, 0xF3, 0x99, 0x81, 0xB2, 0xC0, 0xAC, 0x78,
			0x97, 0x0E, 0x3A, 0x07, 0x44, 0x7A, 0x15, 0x6C,
			0x28, 0x2E, 0x6E, 0x71, 0xF7, 0x86, 0xC6, 0x06,
			0x65, 0x11, 0xBB, 0xDC, 0xB8, 0x3D, 0x32, 0xE5,
			0x31, 0xCC, 0x66, 0xE3, 0x8C, 0x13, 0x5B, 0x24,
			0x21, 0x96, 0x2B, 0x66, 0x11, 0x41, 0xD2, 0x3A,
			0x70, 0x41, 0xAB, 0x68, 0xC7, 0x72, 0x6E, 0x2D,
			0x83, 0x29, 0x09, 0x3B, 0x67, 0x3B, 0x21, 0x98,
			0x07, 0x88, 0x7C, 0x94, 0x9C, 0xD7, 0xB9, 0xBD,
			0x6E, 0xE4, 0x24, 0x7F, 0x26, 0xF6, 0xB9, 0x96,
			0x37, 0x65, 0xFF, 0xFF, 0xD7, 0x6D, 0x2C, 0x5B,
			0x96, 0x35, 0x97, 0xFD, 0x71, 0xB8, 0x96, 0x79,
			0x40, 0x12, 0x0D, 0xDC, 0xEA, 0xC6, 0x9A, 0x58,
			0xAB, 0xBE, 0xD8, 0xD2, 0xB5, 0x91, 0x69, 0xED,
			0xF6, 0x68, 0xEC, 0xCE, 0xD5, 0x19, 0x29, 0x6B,
			0x4E, 0xC0, 0x69, 0xC0, 0x79, 0xFF, 0x39, 0xBA,
			0x12, 0x46, 0x96, 0xFC, 0x0D, 0x31, 0x55, 0xB9,
			0xF0, 0x2D, 0x8B, 0xA6, 0xBF, 0xF4, 0x93, 0xB6,
			0x5C, 0x80, 0x85, 0x31, 0x99, 0xAE, 0x9D, 0xE8,
			0x6F, 0x07, 0xA8, 0xE8, 0x06, 0xE2, 0xA2, 0x19,
			0x29, 0x39, 0x16, 0x36, 0x6A, 0x6B, 0xEF, 0x5B,
			0x99, 0x7A, 0x01, 0x59, 0x6F, 0x95, 0x10, 0xCB,
			0x16, 0x95, 0xFD, 0xAF, 0x43, 0x9A, 0x98, 0xB3,
			0xA1, 0x41, 0x9B, 0xA8, 0x23, 0x3E, 0xC2, 0x4C,
			0x78, 0xD8, 0x83, 0xE3, 0x44, 0x72, 0x3E, 0xDE,
			0xAC, 0xB7, 0x81, 0x58
		},
		.len_bits = 516 << 3,
	},
	.digest_enc = {
		.data = {
			0xAC, 0xB7, 0x81, 0x58
		},
		.len = 4,
		.offset = 512,
	},
	.validDataLen = {
		.len_bits = 516 << 3,
	},
	.validCipherLen = {
		.len_bits = 516 << 3,
	},
	.validAuthLen = {
		.len_bits = 512 << 3,
	}
};

#endif /* TEST_CRYPTODEV_MIXED_TEST_VECTORS_H_ */
