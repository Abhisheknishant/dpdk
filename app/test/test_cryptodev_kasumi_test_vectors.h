/* SPDX-License-Identifier: BSD-3-Clause
 * Copyright(c) 2016-2020 Intel Corporation
 */

#ifndef TEST_CRYPTODEV_KASUMI_TEST_VECTORS_H_
#define TEST_CRYPTODEV_KASUMI_TEST_VECTORS_H_

struct kasumi_test_data {
	struct {
		uint8_t data[64];
		unsigned int len;
	} key;

	struct {
		uint8_t data[64] __rte_aligned(16);
		unsigned int len;
	} cipher_iv;

	/*
	 * Data may include COUNT (4 bytes), FRESH (4 bytes),
	 * DIRECTION (1 bit), plus 1 0*, with enough 0s,
	 * so total length is multiple of 8 or 64 bits
	 */
	struct {
		uint8_t data[1024];
		unsigned int len; /* length must be in Bits */
	} plaintext;

	struct {
		unsigned int len;
	} validDataLenInBits;

	struct {
		uint8_t data[1024];
		unsigned int len; /* length must be in Bits */
	} ciphertext;

	struct {
		unsigned int len;
	} validCipherLenInBits;

	struct {
		unsigned int len;
	} validCipherOffsetInBits;

	/* Actual length of data to be hashed */
	struct {
		unsigned int len;
	} validAuthLenInBits;

	struct {
		uint8_t data[64];
		unsigned int len;
		unsigned int offset_bytes; /* offset must be in Bytes */
	} digest;

};

struct kasumi_test_data kasumi_test_case_1 = {
	.key = {
		.data = {
			0xD6, 0xBA, 0x25, 0x45, 0x74, 0x6B, 0xA5, 0x9D,
			0x92, 0x6B, 0x1D, 0x81, 0x94, 0xB9, 0x94, 0xB3
		},
		.len = 16
	},
	.cipher_iv = {
		.data = {
			0x22, 0xAD, 0xC5, 0x1B, 0x28, 0x90, 0x79, 0xA5
		},
		.len = 8
	},
	.plaintext = {
		.data = {
			0x01, 0x5F, 0x4E, 0xE8, 0x29, 0xDF, 0xE2, 0x11,
			0xCE, 0xB1, 0x5B, 0x5C, 0xE6, 0x1A, 0x56, 0x97,
			0x24, 0x2B, 0x7E, 0x0C, 0x1E, 0xD1, 0x4F, 0x10,
			0x22, 0xD3, 0x3B, 0x27, 0x81, 0xD6, 0x05, 0x83,
			0x35, 0x53, 0x6B, 0x5E, 0x33, 0x4D, 0x70, 0x02,
			0xFE, 0xCB, 0x5E, 0xE5, 0xE6, 0xB4, 0x7D, 0x0A,
			0xE0, 0xFB, 0x16, 0xFE, 0xCC, 0x66, 0x0F, 0xEF,
			0x39, 0x4A, 0x16, 0xBA, 0x20, 0x1B, 0x3E, 0x55,
			0x6F, 0xA9, 0xB4, 0xA3, 0xF6, 0x24, 0xA5, 0xF5,
			0xF0, 0x04, 0xDB, 0xD6, 0xB8, 0x58, 0xE0, 0x98,
			0x53, 0xF7, 0x97, 0x1F, 0x5D, 0xA6, 0x0E, 0x97,
			0xF1, 0x25, 0x52, 0x11, 0x41, 0x90, 0x67, 0xB1,
			0x39, 0x1C, 0x54, 0x30
		},
		.len = 800
	},
	.ciphertext = {
		.data = {
			0xEE, 0x76, 0xA0, 0xC7, 0x4E, 0xAA, 0x0C, 0x0F,
			0x77, 0x8E, 0xAA, 0xB7, 0x9A, 0x12, 0x63, 0xF8,
			0x7B, 0x08, 0x07, 0xD6, 0xE0, 0x81, 0x90, 0x0E,
			0xC4, 0x51, 0x4B, 0x8A, 0xA8, 0x62, 0xD5, 0x40,
			0x28, 0x43, 0x3C, 0x83, 0x8C, 0xEF, 0x31, 0xE4,
			0x99, 0x34, 0x47, 0xCB, 0xCF, 0xC4, 0xFD, 0xD3,
			0xB1, 0x09, 0xAE, 0x8C, 0x42, 0x6F, 0xA7, 0x32,
			0x4A, 0x9F, 0x92, 0xDD, 0x32, 0xAF, 0xC8, 0x12,
			0x4A, 0x8B, 0xC0, 0x30, 0x50, 0x76, 0x27, 0xCF,
			0x84, 0x8C, 0xB2, 0x3F, 0x84, 0x7D, 0xA3, 0x3E,
			0xA4, 0xA5, 0xFA, 0xEC, 0xD7, 0xF2, 0x29, 0x17,
			0xD3, 0xBC, 0x5E, 0xAD, 0x72, 0x40, 0xB6, 0x57,
			0xA8, 0xA2, 0xF6, 0x80
		},
		.len = 800
	},
	.validCipherLenInBits = {
		.len = 798
	},
	.validCipherOffsetInBits = {
		.len = 0
	}
};

struct kasumi_test_data kasumi_test_case_2 = {
	.key = {
		.data = {
			0x8B, 0x71, 0xC9, 0xDF, 0x52, 0x90, 0xFF, 0x56,
			0xDE, 0x91, 0x22, 0xE7, 0xA4, 0x91, 0x1D, 0xF8
		},
		.len = 16
	},
	.cipher_iv = {
		.data = {
			0x45, 0xA8, 0x02, 0xC1, 0xB9, 0x0C, 0x3F, 0xFC
		},
		.len = 8
	},
	.plaintext = {
		.data = {
			0xEF, 0xEB, 0x0F, 0x27, 0xE7, 0x76, 0x76, 0x62,
			0xB9, 0x05, 0xE6, 0x97, 0xC6, 0x8F, 0xDC, 0x4B,
			0x7F, 0x3D, 0x83, 0xC8, 0x40, 0x2A, 0xE0, 0x3A,
			0xBC, 0x28, 0x32, 0x50, 0xCB, 0xBD, 0x26, 0xBA,
			0xA8, 0x36, 0xE1, 0x90, 0xAC, 0x58, 0xF2, 0x66,
			0x5E, 0xD9, 0xFD, 0x24, 0x68, 0xDA, 0x70, 0xE8,
			0x18, 0xF3, 0xB0, 0x58, 0x1E, 0x91, 0x92, 0xDB,
			0xB9, 0xC5, 0x2B, 0x84, 0x83, 0x52, 0x3F, 0x2B
		},
		.len = 512
	},
	.ciphertext = {
		.data = {
			0xB6, 0xA0, 0x66, 0x57, 0xFD, 0xE1, 0x56, 0xB7,
			0xA2, 0xB9, 0x3F, 0xC4, 0x72, 0xE6, 0x99, 0x72,
			0x81, 0xAA, 0xE3, 0xCC, 0x74, 0xD2, 0x87, 0x9C,
			0xD1, 0x8F, 0x42, 0xCF, 0xAC, 0xEE, 0x7E, 0xBB,
			0x6C, 0x13, 0x8B, 0xEA, 0x63, 0x5F, 0xC3, 0x39,
			0x4B, 0x0E, 0x98, 0x84, 0x9F, 0xA4, 0x03, 0x02,
			0x6A, 0x06, 0x47, 0x31, 0x4B, 0x88, 0x9F, 0xBB,
			0x16, 0xB5, 0x6F, 0xFC, 0x4B, 0xD7, 0x97, 0x5C
		},
		.len = 512
	},
	.validCipherLenInBits = {
		.len = 510
	},
	.validCipherOffsetInBits = {
		.len = 0
	}
};

struct kasumi_test_data kasumi_test_case_3 = {
	.key = {
		.data = {
			0x78, 0x7C, 0x09, 0x9E, 0x8F, 0xA5, 0x13, 0x26,
			0x47, 0xE4, 0x2A, 0xA1, 0x04, 0x03, 0xA1, 0x2B
		},
		.len = 16
	},
	.cipher_iv = {
		.data = {
			0xB2, 0x34, 0xC3, 0x80, 0x77, 0xA3, 0x53, 0xCE
		},
		.len = 8
	},
	.plaintext = {
		.data = {
			0xA3, 0xBE, 0x96, 0x84, 0x3C, 0x0F, 0xCA, 0x8B,
			0x62, 0x15, 0x5A, 0x5C, 0x89, 0x8B, 0xF5, 0x5B,
			0xB7, 0x6C, 0xC9, 0x0C, 0x39, 0x46, 0x1D, 0x8A
		},
		.len = 192
	},
	.ciphertext = {
		.data = {
			0xA3, 0xBE, 0x96, 0x84, 0x3C, 0x0F, 0xCA, 0x8B,
			0x95, 0x53, 0xE3, 0x9D, 0x8E, 0xEB, 0x94, 0x3E,
			0x27, 0x7A, 0xA0, 0x79, 0x62, 0x32, 0x8B, 0x8A
		},
		.len = 192
	},
	.validDataLenInBits = {
		.len = 192
	},
	.validCipherLenInBits = {
		.len = 120
	},
	.validAuthLenInBits = {
		.len = 192
	},
	.validCipherOffsetInBits = {
		.len = 64
	},
	.digest = {
		.data = {0x55, 0x43, 0x22, 0x96},
		.len  = 4,
		.offset_bytes = 0
	}
};

struct kasumi_test_data kasumi_test_case_4 = {
	.key = {
		.data = {
			0xE0, 0xDC, 0x6E, 0xA5, 0xB0, 0x19, 0x93, 0x46,
			0x47, 0x71, 0x03, 0x75, 0xF7, 0xE2, 0x55, 0xB8
		},
		.len = 16
	},
	.cipher_iv = {
		.data = {
			0x18, 0x13, 0x27, 0x05, 0x97, 0x95, 0xD1, 0xEC
		},
		.len = 8
	},
	.plaintext = {
		.data = {
			0x42, 0x72, 0x17, 0xAF, 0xBC, 0x74, 0x04, 0x43,
			0x80, 0x4E, 0x38, 0x05, 0x4B, 0x85, 0x26, 0x54,
			0x21, 0x7A, 0x24, 0xB7, 0x7C, 0x59, 0xD7, 0xA9,
			0x01, 0x67, 0xC2, 0x27, 0x47, 0xC0, 0xA9, 0x8A
		},
		.len = 256
	},
	.ciphertext = {
		.data = {
			0xCB, 0x46, 0x1C, 0x8B, 0x3F, 0x12, 0xFB, 0xCE,
			0x4C, 0xE3, 0x90, 0x51, 0x24, 0x0E, 0xA0, 0xCD,
			0xF7, 0xB5, 0x57, 0x6D, 0xED, 0x30, 0x8E, 0xB3,
			0xB0, 0xFF, 0x46, 0x27, 0xDF, 0x5D, 0x81, 0xE9
		},
		.len = 256
	},
	.validCipherLenInBits = {
		.len = 253
	},
	.validCipherOffsetInBits = {
		.len = 0
	}
};

struct kasumi_test_data kasumi_test_case_5 = {
	.key = {
		.data = {
			0xC8, 0x9E, 0xF1, 0xE7, 0x58, 0x97, 0x18, 0xF4,
			0xE9, 0x14, 0xE9, 0xEB, 0x37, 0x99, 0x77, 0xFA
		},
		.len = 16
	},
	.cipher_iv = {
		.data = {
			0x04, 0x58, 0x2D, 0x4C, 0x43, 0x96, 0xDA, 0x9F
		},
		.len = 8
	},
	.plaintext = {
		.data = {
			0x64, 0xED, 0x54, 0x54, 0xCE, 0x70, 0x49, 0x1B,
			0x63, 0x35, 0xB6, 0x71, 0x29, 0xB6, 0x36, 0xBB,
			0x12, 0x38, 0xB1, 0x22, 0xC1, 0x2C, 0x63, 0x76,
			0xF3, 0x54, 0xAB, 0xD4, 0x18, 0x14, 0xB5, 0x7D,
			0x01, 0x09, 0xD2, 0xD0, 0x7A, 0x1C, 0xEB, 0xDD,
			0x52, 0xA2, 0x4E, 0x7B, 0x59, 0x85, 0x37, 0x6B,
			0xBE, 0xE8, 0x8E, 0x7F, 0x15, 0xF1, 0xF6, 0x09,
			0x46, 0xA2, 0xDD, 0x5F, 0xB6, 0x93, 0xDD, 0xB8,
			0x9C, 0xB0, 0x88, 0x17, 0xCC, 0x74, 0xF4, 0x1E,
			0x16, 0x43, 0x9A, 0x6F, 0xC8, 0xD2, 0xDB, 0x87,
			0xBB, 0x69, 0x07, 0xD0, 0x5B, 0xFD, 0xD9, 0xA2,
			0xA0, 0xB7, 0x02, 0x57, 0x4A, 0xDF, 0x0F, 0xE7,
			0x8F, 0x98, 0xFE, 0x5C, 0x0C, 0xF2, 0x7A, 0x22,
			0x35
		},
		.len = 840
	},
	.ciphertext = {
		.data = {
			0x46, 0xBC, 0x17, 0xC1, 0xA0, 0x3C, 0xEA, 0x37,
			0x6A, 0x81, 0x6F, 0x9F, 0x56, 0x92, 0xDB, 0xA2,
			0x8C, 0x49, 0x0B, 0x09, 0x77, 0xB5, 0xB8, 0x42,
			0x5E, 0x2F, 0xF6, 0x55, 0x96, 0x97, 0x50, 0xB5,
			0xDE, 0x11, 0xE9, 0x74, 0xDA, 0x63, 0x6F, 0xFD,
			0x66, 0x4F, 0x43, 0x4D, 0x29, 0xAB, 0x86, 0x7D,
			0x73, 0x7D, 0x05, 0xE9, 0x6D, 0x70, 0x29, 0xED,
			0x9A, 0x4D, 0xCF, 0xF8, 0xE5, 0x5A, 0xE2, 0xA0,
			0xAD, 0x52, 0x19, 0xB0, 0x89, 0x4B, 0xEF, 0xFB,
			0xD7, 0x64, 0x3B, 0xB9, 0x44, 0x75, 0x67, 0xCA,
			0xD1, 0x9C, 0xD7, 0x7F, 0x48, 0x20, 0x8C, 0xB8,
			0x11, 0x06, 0x91, 0x42, 0x00, 0x6A, 0x0F, 0x98,
			0x2F, 0x51, 0xE3, 0xF9, 0x4D, 0xB5, 0x5B, 0x81,
			0x3A
		},
		.len = 840
	},
	.validCipherLenInBits = {
		.len = 837
	},
	.validCipherOffsetInBits = {
		.len = 0
	}
};

struct kasumi_test_data kasumi_test_case_6 = {
	.key = {
		.data = {
			0x0D, 0x4C, 0xC3, 0xFE, 0xF2, 0x4F, 0x7B, 0xF0,
			0xDB, 0xCF, 0xD6, 0x0C, 0xE1, 0xE2, 0x1B, 0x35
		},
		.len = 16
	},
	.cipher_iv = {
		.data = {
			0x47, 0x03, 0x7C, 0xDF, 0xDA, 0x4B, 0x3A, 0x18
		},
		.len = 8
	},
	.plaintext = {
		.data = {
			0xB8, 0x8E, 0xD0, 0xE4, 0x20, 0x39, 0x33, 0x56,
			0x76, 0x00, 0x85, 0x47, 0xE7, 0x6A, 0xEE, 0x65,
			0x8F, 0xEF, 0x10, 0x77, 0xA2, 0x36, 0x13, 0x33
		},
		.len = 192
	},
	.ciphertext = {
		.data = {
			0x38, 0xA6, 0xF0, 0x56, 0x05, 0xD2, 0xEC, 0x49,
			0xB1, 0x6C, 0xD6, 0x69, 0xA1, 0xF7, 0x15, 0x80,
			0x0D, 0x3E, 0x9B, 0x2D, 0xBF, 0x81, 0x27, 0x33
		},
		.len = 192
	},
	.validDataLenInBits = {
		.len = 192
	},
	.validCipherLenInBits = {
		.len = 120
	},
	.validCipherOffsetInBits = {
		.len = 64
	},
	.validAuthLenInBits = {
		.len = 192
	},
	.digest = {
		.data = {0x70, 0x0D, 0x1D, 0x4A},
		.len  = 4,
		.offset_bytes = 0
	}
};

struct kasumi_test_data kasumi_auth_cipher_test_case_2 = {
	.key = {
		.data = {
			0x04, 0x02, 0xF1, 0xBB, 0xD4, 0xDE, 0x87, 0xDF,
			0xA0, 0x03, 0x21, 0x37, 0x36, 0x88, 0x53, 0xE7
		},
		.len = 16
	},
	.cipher_iv = {
		.data = {
			0xE3, 0xD1, 0x5E, 0x4B, 0x4E, 0x24, 0x6B, 0x3D
		},
		.len = 8
	},
	.plaintext = {
		.data = {
			0x9F, 0x6D, 0x35, 0x6B, 0x40, 0xAC, 0x32, 0xF5,
			0xF6, 0x0C, 0xDD, 0x1B, 0x5A, 0x48, 0xA1, 0xF2,
			0x19, 0x73, 0x06, 0x4B, 0xBD, 0x2B, 0x61, 0x8F,
			0xCC, 0x67, 0x22, 0x53, 0xFB, 0xB8, 0xB8, 0x9A,
			0x25, 0xED, 0x05, 0x65, 0x9A, 0x38, 0x5B, 0x90,
			0x45, 0x38, 0xAC, 0x9F, 0x80, 0x4D, 0x91, 0x99,
			0xC1, 0x98, 0xE5, 0x7E, 0xC3, 0x47, 0x0D, 0x90,
			0xAE, 0x30, 0xE4, 0xA9, 0xE8, 0x9C, 0x44, 0x0D,
			0x8A, 0x49, 0x73, 0x25, 0x82, 0xCE, 0xB5, 0xC7,
			0x06, 0x62, 0x66, 0x86, 0xB0, 0xF8, 0x20, 0x71,
			0x90, 0x06, 0xEF, 0x54, 0x4D, 0xFD, 0xE5, 0xFC,
			0x2D, 0xC9, 0xA6, 0x15, 0x66, 0xEA, 0x23, 0xF1,
			0x34, 0x97, 0x16, 0xB6, 0x65, 0xCC, 0x7D, 0x6C,
			0x2E, 0xE4, 0xF2, 0xDE, 0xDC, 0x13, 0x4F, 0x6D,
			0x19, 0x3F, 0xC2, 0x67, 0x3C, 0xA7, 0x64, 0x69,
			0x71, 0x0A, 0x7F, 0xD8, 0xF5, 0xA3, 0xCA, 0x29
		},
		.len = 128 << 3
	},
	.ciphertext = {
		.data = {
			0x9F, 0x6D, 0x10, 0x22, 0x14, 0xFB, 0x29, 0x9D,
			0x9E, 0x5F, 0xAB, 0x73, 0x0E, 0xFF, 0x3F, 0x40,
			0x9F, 0x95, 0x93, 0x82, 0xB5, 0x5D, 0xF6, 0x1B,
			0x37, 0x6E, 0x50, 0x1E, 0xE0, 0x01, 0x41, 0x28,
			0x07, 0x71, 0xED, 0x59, 0xB6, 0x05, 0x72, 0x7F,
			0x9B, 0x20, 0x4E, 0x16, 0xC8, 0x1B, 0x1D, 0x73,
			0x2F, 0xCF, 0xF9, 0x78, 0x03, 0xFB, 0xD8, 0xAA,
			0xDD, 0xD0, 0x47, 0x00, 0x69, 0xE8, 0x76, 0x90,
			0x7F, 0xC9, 0x62, 0x50, 0x4D, 0x75, 0x23, 0xD9,
			0xCB, 0x56, 0x2E, 0x0A, 0x55, 0xB7, 0xE5, 0x5C,
			0xDB, 0x0A, 0x23, 0x06, 0xCF, 0xBF, 0xFF, 0x98,
			0xBD, 0x40, 0x27, 0x25, 0x1C, 0x70, 0x33, 0xAC,
			0x6F, 0x59, 0xDA, 0xCE, 0xA0, 0xBF, 0x38, 0x60,
			0x3C, 0xF9, 0x79, 0xD8, 0x92, 0x17, 0x89, 0x6A,
			0xC7, 0xBD, 0xF5, 0x80, 0x1A, 0x20, 0x1F, 0x4B,
			0xD9, 0x34, 0x2C, 0xD9, 0x06, 0xFC, 0xA9, 0x9F
		},
		.len = 128 << 3
	},
	.validDataLenInBits = {
		.len = 128 << 3
	},
	.validCipherLenInBits = {
		.len = 126 << 3
	},
	.validAuthLenInBits = {
		.len = 124 << 3
	},
	.validCipherOffsetInBits = {
		.len = 2 << 3
	},
	.digest = {
		.data = {0x06, 0xFC, 0xA9, 0x9F},
		.len  = 4,
		.offset_bytes = 124
	}
};
#endif /* TEST_CRYPTODEV_KASUMI_TEST_VECTORS_H_ */
